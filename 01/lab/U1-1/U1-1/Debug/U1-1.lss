
U1-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000135  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f1  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013a  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000159  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002c  00000000  00000000  00000645  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00000671  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

inline void clearBits();

int main(void){
	// Activate Output and init
	DDRD |= ((1 << LED0_MODE) | (1 << LED1_MODE) | (1 << LED2_MODE));
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	87 60       	ori	r24, 0x07	; 7
  84:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << LED0_VAL) | (1 << LED1_VAL) | (1 << LED2_VAL));
  86:	8b b1       	in	r24, 0x0b	; 11
  88:	88 7f       	andi	r24, 0xF8	; 248
  8a:	8b b9       	out	0x0b, r24	; 11
	uint8_t count = 7;
  8c:	87 e0       	ldi	r24, 0x07	; 7
		/*
		PORTD |= ~count & (1 << LED0_VAL);
		PORTD |= ~count & (1 << LED1_VAL);
		PORTD |= ~count & (1 << LED2_VAL);
		*/
		count = (!count) ? 7 : count - 1;
  8e:	37 e0       	ldi	r19, 0x07	; 7
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x14>
  92:	83 2f       	mov	r24, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f ef       	ldi	r18, 0xFF	; 255
  96:	43 ed       	ldi	r20, 0xD3	; 211
  98:	90 e3       	ldi	r25, 0x30	; 48
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	40 40       	sbci	r20, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop
	}
}

inline void clearBits(){
	// Set bits to zero
	PORTD &= ~((1 << LED0_VAL) | (1 << LED1_VAL) | (1 << LED2_VAL));
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	98 7f       	andi	r25, 0xF8	; 248
  aa:	9b b9       	out	0x0b, r25	; 11

	while(1){

		_delay_ms(1000);
		clearBits();
		PORTD |= ~count;
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	28 2f       	mov	r18, r24
  b0:	20 95       	com	r18
  b2:	92 2b       	or	r25, r18
  b4:	9b b9       	out	0x0b, r25	; 11
		/*
		PORTD |= ~count & (1 << LED0_VAL);
		PORTD |= ~count & (1 << LED1_VAL);
		PORTD |= ~count & (1 << LED2_VAL);
		*/
		count = (!count) ? 7 : count - 1;
  b6:	88 23       	and	r24, r24
  b8:	61 f3       	breq	.-40     	; 0x92 <main+0x12>
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	eb cf       	rjmp	.-42     	; 0x94 <main+0x14>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
