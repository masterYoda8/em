
U2-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000021e  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f4  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000158  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000198  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00000810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019f  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000200  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000cc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_4>
  14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  9e:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

// If the counter is running or not
volatile uint8_t running = 1;
volatile uint8_t count;

ISR(INT0_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	running = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 00 01 	sts	0x0100, r24
}
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <getDipValues>:
		_delay_ms(1000);
	}
}

void getDipValues() {
	count = (~PIND >> 3); 
  c4:	89 b1       	in	r24, 0x09	; 9
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 95       	com	r24
  ca:	90 95       	com	r25
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	95 95       	asr	r25
  d6:	87 95       	ror	r24
  d8:	80 93 02 01 	sts	0x0102, r24
  dc:	08 95       	ret

000000de <setLEDS>:
}

void setLEDS() {
	uint8_t tmp = PORTB;
  de:	95 b1       	in	r25, 0x05	; 5
	// 11111000 -> Clear last 3 bits
	tmp &= 0xF8;
	// 00000XXX -> Set count on tmp without modifying first 5 bits
	tmp |= (~count & 0x07);
  e0:	80 91 02 01 	lds	r24, 0x0102
  e4:	80 95       	com	r24
  e6:	87 70       	andi	r24, 0x07	; 7
}

void setLEDS() {
	uint8_t tmp = PORTB;
	// 11111000 -> Clear last 3 bits
	tmp &= 0xF8;
  e8:	98 7f       	andi	r25, 0xF8	; 248
	// 00000XXX -> Set count on tmp without modifying first 5 bits
	tmp |= (~count & 0x07);
  ea:	89 2b       	or	r24, r25
	PORTB = tmp;
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	08 95       	ret

000000f0 <__vector_4>:

ISR(INT0_vect){
	running = 1;
}

ISR(PCINT1_vect) {
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
	uint8_t buttonPressed = (~PINC) & (1 << PINC0);
	if (buttonPressed) {
 112:	30 99       	sbic	0x06, 0	; 6
 114:	06 c0       	rjmp	.+12     	; 0x122 <__vector_4+0x32>
		running = 0;
 116:	10 92 00 01 	sts	0x0100, r1
		getDipValues();
 11a:	0e 94 62 00 	call	0xc4	; 0xc4 <getDipValues>
		setLEDS();
 11e:	0e 94 6f 00 	call	0xde	; 0xde <setLEDS>
	} 	
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_5>:

ISR(PCINT2_vect){
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
			//DEBUG
			//PORTD &= ~(1 << DEBUG_LED_VAL);
			//_delay_ms(100);
			//PORTD |= (1 << DEBUG_LED_VAL);
			//DEBUG END
			count = 7;
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	80 93 02 01 	sts	0x0102, r24
			//PORTD &= ~(1 << PORTD1);
			setLEDS();
 16c:	0e 94 6f 00 	call	0xde	; 0xde <setLEDS>
	//}
}
 170:	ff 91       	pop	r31
 172:	ef 91       	pop	r30
 174:	bf 91       	pop	r27
 176:	af 91       	pop	r26
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	7f 91       	pop	r23
 17e:	6f 91       	pop	r22
 180:	5f 91       	pop	r21
 182:	4f 91       	pop	r20
 184:	3f 91       	pop	r19
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <main>:

int main(void){
	// Debug LED
	DDRD |= (1 << DEBUG_LED_MODE);
 192:	50 9a       	sbi	0x0a, 0	; 10
	PORTD |= (1 << DEBUG_LED_VAL); 
 194:	58 9a       	sbi	0x0b, 0	; 11
	
	
	// Activate Output and Input Pullups and init
	DDRB |= ((1 << LED0_MODE) | (1 << LED1_MODE) | (1 << LED2_MODE));
 196:	84 b1       	in	r24, 0x04	; 4
 198:	87 60       	ori	r24, 0x07	; 7
 19a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PORTD1);
 19c:	51 9a       	sbi	0x0a, 1	; 10
	PORTB &= ~((1 << LED0_VAL) | (1 << LED1_VAL) | (1 << LED2_VAL));
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	88 7f       	andi	r24, 0xF8	; 248
 1a2:	85 b9       	out	0x05, r24	; 5
	PORTD |= ((1 << DIP0_PULL_UP) | (1 << DIP1_PULL_UP) | (1 << DIP2_PULL_UP) | (1 << TASTER_A4_PULL_UP));
 1a4:	8b b1       	in	r24, 0x0b	; 11
 1a6:	8c 63       	ori	r24, 0x3C	; 60
 1a8:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1 << TASTER_A3_PULL_UP);
 1aa:	40 9a       	sbi	0x08, 0	; 8
	
	// Set INT0 to detect falling edge
	EICRA |= (1 << ISC01);
 1ac:	e9 e6       	ldi	r30, 0x69	; 105
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	80 83       	st	Z, r24
	
	// Enable local interrupt for INT0
	EIMSK |= (1 << INT0);
 1b6:	e8 9a       	sbi	0x1d, 0	; 29
	
	// Enable interrupts for PCINT14 - PCINT8 and PCINT23 - PCINT16
	PCICR |= ((1 << PCIE1) | (1 << PCIE2));
 1b8:	e8 e6       	ldi	r30, 0x68	; 104
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
	
	// Enable interrupt for PCINT8 and PCINT17
	PCMSK1 |= (1 << PCINT8);
 1c2:	ec e6       	ldi	r30, 0x6C	; 108
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT17);
 1cc:	ed e6       	ldi	r30, 0x6D	; 109
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	82 60       	ori	r24, 0x02	; 2
 1d4:	80 83       	st	Z, r24
	
	// Enable global interrupt
	sei();
 1d6:	78 94       	sei

	count = 8;
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	80 93 02 01 	sts	0x0102, r24
			if(count) {
				count--;			
				setLEDS();	
			} else {
				// Trigger interrupt
				PORTD ^= (1 << PORTD1);
 1de:	c2 e0       	ldi	r28, 0x02	; 2
	sei();

	count = 8;

	while(1){
		if(running){
 1e0:	80 91 00 01 	lds	r24, 0x0100
 1e4:	88 23       	and	r24, r24
 1e6:	79 f0       	breq	.+30     	; 0x206 <main+0x74>
			if(count) {
 1e8:	80 91 02 01 	lds	r24, 0x0102
 1ec:	88 23       	and	r24, r24
 1ee:	41 f0       	breq	.+16     	; 0x200 <main+0x6e>
				count--;			
 1f0:	80 91 02 01 	lds	r24, 0x0102
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	80 93 02 01 	sts	0x0102, r24
				setLEDS();	
 1fa:	0e 94 6f 00 	call	0xde	; 0xde <setLEDS>
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <main+0x74>
			} else {
				// Trigger interrupt
				PORTD ^= (1 << PORTD1);
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	8c 27       	eor	r24, r28
 204:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	83 ed       	ldi	r24, 0xD3	; 211
 20a:	90 e3       	ldi	r25, 0x30	; 48
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x7a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x84>
 216:	00 00       	nop
 218:	e3 cf       	rjmp	.-58     	; 0x1e0 <main+0x4e>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
