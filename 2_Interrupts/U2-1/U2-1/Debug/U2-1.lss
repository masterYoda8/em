
U2-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c5  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000158  00000000  00000000  0000044d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018b  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000186  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000135  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000aa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_4>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 98 00 	call	0x130	; 0x130 <main>
  8e:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:

// If the counter is running or not
volatile uint8_t running = 1;
volatile uint8_t count = 7;

ISR(INT0_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
	running = 1;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 93 01 01 	sts	0x0101, r24
}
  a8:	8f 91       	pop	r24
  aa:	0f 90       	pop	r0
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	0f 90       	pop	r0
  b0:	1f 90       	pop	r1
  b2:	18 95       	reti

000000b4 <getDipValues>:
		_delay_ms(1000);
	}
}

void getDipValues() {
	count = (~PIND >> 3); 
  b4:	89 b1       	in	r24, 0x09	; 9
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	80 95       	com	r24
  ba:	90 95       	com	r25
  bc:	95 95       	asr	r25
  be:	87 95       	ror	r24
  c0:	95 95       	asr	r25
  c2:	87 95       	ror	r24
  c4:	95 95       	asr	r25
  c6:	87 95       	ror	r24
  c8:	80 93 00 01 	sts	0x0100, r24
  cc:	08 95       	ret

000000ce <setLEDS>:
}

void setLEDS() {
	uint8_t tmp = PORTB;
  ce:	95 b1       	in	r25, 0x05	; 5
	// 11111000 -> Clear last 3 bits
	tmp &= 0xF8;
	// 00000XXX -> Set count on tmp without modifying first 5 bits
	tmp |= (~count & 0x07);
  d0:	80 91 00 01 	lds	r24, 0x0100
  d4:	80 95       	com	r24
  d6:	87 70       	andi	r24, 0x07	; 7
}

void setLEDS() {
	uint8_t tmp = PORTB;
	// 11111000 -> Clear last 3 bits
	tmp &= 0xF8;
  d8:	98 7f       	andi	r25, 0xF8	; 248
	// 00000XXX -> Set count on tmp without modifying first 5 bits
	tmp |= (~count & 0x07);
  da:	89 2b       	or	r24, r25
	PORTB = tmp;
  dc:	85 b9       	out	0x05, r24	; 5
  de:	08 95       	ret

000000e0 <__vector_4>:
volatile uint8_t count = 7;

ISR(INT0_vect){
	running = 1;
}
ISR(PCINT1_vect) {
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	5f 93       	push	r21
  f2:	6f 93       	push	r22
  f4:	7f 93       	push	r23
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	af 93       	push	r26
  fc:	bf 93       	push	r27
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	running = 0;
 102:	10 92 01 01 	sts	0x0101, r1
	getDipValues();
 106:	0e 94 5a 00 	call	0xb4	; 0xb4 <getDipValues>
	setLEDS();
 10a:	0e 94 67 00 	call	0xce	; 0xce <setLEDS>
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	bf 91       	pop	r27
 114:	af 91       	pop	r26
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	7f 91       	pop	r23
 11c:	6f 91       	pop	r22
 11e:	5f 91       	pop	r21
 120:	4f 91       	pop	r20
 122:	3f 91       	pop	r19
 124:	2f 91       	pop	r18
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:

int main(void){
	// Activate Output and Input Pullups and init
	DDRB |= ((1 << LED0_MODE) | (1 << LED1_MODE) | (1 << LED2_MODE));
 130:	84 b1       	in	r24, 0x04	; 4
 132:	87 60       	ori	r24, 0x07	; 7
 134:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1 << LED0_VAL) | (1 << LED1_VAL) | (1 << LED2_VAL));
 136:	85 b1       	in	r24, 0x05	; 5
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	85 b9       	out	0x05, r24	; 5
	PORTD |= ((1 << DIP1_PULL_UP) | (1 << DIP2_PULL_UP) | (1 << DIP3_PULL_UP) | (1 << TASTER_A4_PULL_UP));
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	8c 63       	ori	r24, 0x3C	; 60
 140:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1 << TASTER_A3_PULL_UP);
 142:	40 9a       	sbi	0x08, 0	; 8
	
	// Set INT0 to detect falling edge
	EICRA |= (1 << ISC01);
 144:	e9 e6       	ldi	r30, 0x69	; 105
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 83       	st	Z, r24
	
	// Enable local interrupt for INT0
	EIMSK |= (1 << INT0);
 14e:	e8 9a       	sbi	0x1d, 0	; 29
	
	// Enable interrupts for PCINT14 - PCINT8
	PCICR |= (1 << PCIE1);
 150:	e8 e6       	ldi	r30, 0x68	; 104
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	82 60       	ori	r24, 0x02	; 2
 158:	80 83       	st	Z, r24
	
	// Enable interrupt for PCINT8
	PCMSK1 |= (1 << PCINT8);
 15a:	ec e6       	ldi	r30, 0x6C	; 108
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	
	// Enable global interrupt
	sei();
 164:	78 94       	sei

	
	while(1){
		if(running){
			count = (!count) ? 7 : count - 1;
 166:	c7 e0       	ldi	r28, 0x07	; 7
	// Enable global interrupt
	sei();

	
	while(1){
		if(running){
 168:	80 91 01 01 	lds	r24, 0x0101
 16c:	88 23       	and	r24, r24
 16e:	69 f0       	breq	.+26     	; 0x18a <main+0x5a>
			count = (!count) ? 7 : count - 1;
 170:	80 91 00 01 	lds	r24, 0x0100
 174:	88 23       	and	r24, r24
 176:	21 f0       	breq	.+8      	; 0x180 <main+0x50>
 178:	80 91 00 01 	lds	r24, 0x0100
 17c:	81 50       	subi	r24, 0x01	; 1
 17e:	01 c0       	rjmp	.+2      	; 0x182 <main+0x52>
 180:	8c 2f       	mov	r24, r28
 182:	80 93 00 01 	sts	0x0100, r24
			setLEDS();
 186:	0e 94 67 00 	call	0xce	; 0xce <setLEDS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	83 ed       	ldi	r24, 0xD3	; 211
 18e:	90 e3       	ldi	r25, 0x30	; 48
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x60>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x6a>
 19a:	00 00       	nop
 19c:	e5 cf       	rjmp	.-54     	; 0x168 <main+0x38>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
