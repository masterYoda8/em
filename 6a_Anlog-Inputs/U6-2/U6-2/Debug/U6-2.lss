
U6-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000c5c  00000cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080010e  0080010e  00000cfe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098b  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030b  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e8  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000044a  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0000263a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_18>
  4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	50 6f       	ori	r21, 0xF0	; 240
  6a:	74 65       	ori	r23, 0x54	; 84
  6c:	6e 74       	andi	r22, 0x4E	; 78
  6e:	69 6f       	ori	r22, 0xF9	; 249
  70:	6d 65       	ori	r22, 0x5D	; 93
  72:	74 65       	ori	r23, 0x54	; 84
  74:	72 3a       	cpi	r23, 0xA2	; 162
  76:	20 00       	.word	0x0020	; ????

00000078 <menuLine3>:
  78:	54 65 6d 70 65 72 61 74 75 72 65 3a 20 00           Temperature: .

00000086 <menuLine2>:
  86:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
  96:	2d 2d 00                                            --.

00000099 <menuLine1>:
  99:	41 44 43 20 52 65 73 75 6c 74 73 00 00              ADC Results..

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	ec e5       	ldi	r30, 0x5C	; 92
  ba:	fc e0       	ldi	r31, 0x0C	; 12
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	ae 30       	cpi	r26, 0x0E	; 14
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	ae e0       	ldi	r26, 0x0E	; 14
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a1 33       	cpi	r26, 0x31	; 49
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	0e 94 3a 01 	call	0x274	; 0x274 <main>
  dc:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <_exit>

000000e0 <__bad_interrupt>:
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <uart_send>:
}

void uart_send(uint8_t data) {
	
	// If send register empty and no XOFF
	while(!(UCSR0A & (1<<UDRE0)) && !sendBlock) {
  e4:	e0 ec       	ldi	r30, 0xC0	; 192
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	90 81       	ld	r25, Z
  ea:	95 fd       	sbrc	r25, 5
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <uart_send+0x12>
  ee:	90 91 0e 01 	lds	r25, 0x010E
  f2:	99 23       	and	r25, r25
  f4:	c9 f3       	breq	.-14     	; 0xe8 <uart_send+0x4>
		;
	}
	UDR0 = data;
  f6:	80 93 c6 00 	sts	0x00C6, r24
  fa:	08 95       	ret

000000fc <clearScreen>:
	
}

void clearScreen(){
	// Clear terminal
	uart_send(27); // ESC
  fc:	8b e1       	ldi	r24, 0x1B	; 27
  fe:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
	uart_send('[');
 102:	8b e5       	ldi	r24, 0x5B	; 91
 104:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
	uart_send('2');
 108:	82 e3       	ldi	r24, 0x32	; 50
 10a:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
	uart_send('J');
 10e:	8a e4       	ldi	r24, 0x4A	; 74
 110:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>

	// Move cursor to start
	uart_send(27);
 114:	8b e1       	ldi	r24, 0x1B	; 27
 116:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
	uart_send('[');
 11a:	8b e5       	ldi	r24, 0x5B	; 91
 11c:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
	uart_send('H');
 120:	88 e4       	ldi	r24, 0x48	; 72
 122:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
 126:	08 95       	ret

00000128 <uart_init>:
}

void uart_init() {
	// Configure baud rate
	UBRR0H = (BAUD_CONST >> 8);
 128:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_CONST;
 12c:	87 e6       	ldi	r24, 0x67	; 103
 12e:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable uart send and receive and uart receive complete interrupt
	UCSR0B |= ((1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0));
 132:	e1 ec       	ldi	r30, 0xC1	; 193
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 69       	ori	r24, 0x98	; 152
 13a:	80 83       	st	Z, r24

    clearScreen();
 13c:	0e 94 7e 00 	call	0xfc	; 0xfc <clearScreen>
 140:	08 95       	ret

00000142 <send_xoff>:
	}

	return returnVal;
}

void send_xoff(){
 142:	cf 93       	push	r28
	uint8_t sreg = SREG;
 144:	cf b7       	in	r28, 0x3f	; 63
	cli();
 146:	f8 94       	cli
	x_status = XOFF;
 148:	83 e1       	ldi	r24, 0x13	; 19
 14a:	80 93 00 01 	sts	0x0100, r24
	uart_send(XOFF);
 14e:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
	SREG = sreg;
 152:	cf bf       	out	0x3f, r28	; 63
	
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <__vector_18>:
volatile uint8_t lastRead = 0;
volatile uint8_t counter = 0;
volatile uint8_t sendBlock = 0;
volatile uint8_t x_status = XON; 

ISR(USART_RX_vect){
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	uint8_t tmp = UDR0;
 17a:	80 91 c6 00 	lds	r24, 0x00C6
	
	// If XOFF is received block sending
	if (tmp == XOFF) {
 17e:	83 31       	cpi	r24, 0x13	; 19
 180:	21 f4       	brne	.+8      	; 0x18a <__vector_18+0x32>
		sendBlock = 1;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 0e 01 	sts	0x010E, r24
 188:	22 c0       	rjmp	.+68     	; 0x1ce <__vector_18+0x76>
	} 
	// if XON is received allow sending
	else if(tmp == XON) {
 18a:	81 31       	cpi	r24, 0x11	; 17
 18c:	19 f4       	brne	.+6      	; 0x194 <__vector_18+0x3c>
		sendBlock = 0;
 18e:	10 92 0e 01 	sts	0x010E, r1
 192:	1d c0       	rjmp	.+58     	; 0x1ce <__vector_18+0x76>
	}
	else {
		receiveBuffer[lastReceived] = tmp;
 194:	e0 91 10 01 	lds	r30, 0x0110
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ef 5e       	subi	r30, 0xEF	; 239
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	80 83       	st	Z, r24
		lastReceived = ((lastReceived + 1) % 32);
 1a0:	80 91 10 01 	lds	r24, 0x0110
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	8f 71       	andi	r24, 0x1F	; 31
 1aa:	90 78       	andi	r25, 0x80	; 128
 1ac:	80 93 10 01 	sts	0x0110, r24
		counter++;
 1b0:	80 91 0f 01 	lds	r24, 0x010F
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 0f 01 	sts	0x010F, r24
		// If ring buffer has 26 elements stop receiving
		if(counter >= 22 && x_status==XON) {
 1ba:	80 91 0f 01 	lds	r24, 0x010F
 1be:	86 31       	cpi	r24, 0x16	; 22
 1c0:	30 f0       	brcs	.+12     	; 0x1ce <__vector_18+0x76>
 1c2:	80 91 00 01 	lds	r24, 0x0100
 1c6:	81 31       	cpi	r24, 0x11	; 17
 1c8:	11 f4       	brne	.+4      	; 0x1ce <__vector_18+0x76>
			send_xoff();
 1ca:	0e 94 a1 00 	call	0x142	; 0x142 <send_xoff>
		}
	}
	 
	
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <adcInit>:
    TEMPERATURE
} ADC_PORT;

void adcInit(){
    // Enable ADC, first disable power reduction for ADC
    PRR &= ~(1<<PRADC);
 1f0:	e4 e6       	ldi	r30, 0x64	; 100
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	80 83       	st	Z, r24
    ADCSRA |= (1 << ADEN);
 1fa:	ea e7       	ldi	r30, 0x7A	; 122
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	80 68       	ori	r24, 0x80	; 128
 202:	80 83       	st	Z, r24

    // Set prescaler frequency to 125 kHz - (16 MHz / 125 kHz = 128)
    ADCSRA |= ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
 204:	80 81       	ld	r24, Z
 206:	87 60       	ori	r24, 0x07	; 7
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <adcRead>:
    }
    // Wait for voltage to stabilize
    _delay_ms(5);
}

void adcRead(ADC_PORT port, uint16_t* value){
 20c:	db 01       	movw	r26, r22
    ADCSRA |= ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
}

inline void adcSetPort(ADC_PORT port){
    // clear regs
    ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
 20e:	ec e7       	ldi	r30, 0x7C	; 124
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	90 81       	ld	r25, Z
 214:	90 7f       	andi	r25, 0xF0	; 240
 216:	90 83       	st	Z, r25

    // enum is uint8_t first 4 bits are always empty
    ADMUX |= port;
 218:	90 81       	ld	r25, Z
 21a:	98 2b       	or	r25, r24
 21c:	90 83       	st	Z, r25
}

inline void adcSetRefVoltage(ADC_PORT port){
    if(port == TEMPERATURE){
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	21 f4       	brne	.+8      	; 0x22a <adcRead+0x1e>
        // 1.1V Reference Voltage
        ADMUX |= ((1 << REFS1) | (1 << REFS0));
 222:	80 81       	ld	r24, Z
 224:	80 6c       	ori	r24, 0xC0	; 192
 226:	80 83       	st	Z, r24
 228:	08 c0       	rjmp	.+16     	; 0x23a <adcRead+0x2e>
    } else {
        // AVCC Pin with external capacitor at AREF pin
        ADMUX &= ~(1 << REFS1);
 22a:	ec e7       	ldi	r30, 0x7C	; 124
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	8f 77       	andi	r24, 0x7F	; 127
 232:	80 83       	st	Z, r24
        ADMUX |= (1 << REFS0);
 234:	80 81       	ld	r24, Z
 236:	80 64       	ori	r24, 0x40	; 64
 238:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f e1       	ldi	r24, 0x1F	; 31
 23c:	9e e4       	ldi	r25, 0x4E	; 78
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <adcRead+0x32>
 242:	00 c0       	rjmp	.+0      	; 0x244 <adcRead+0x38>
 244:	00 00       	nop
void adcRead(ADC_PORT port, uint16_t* value){
    adcSetPort(port);
    adcSetRefVoltage(port);

    // Start conversion
    ADCSRA |= (1 << ADSC);
 246:	ea e7       	ldi	r30, 0x7A	; 122
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	80 83       	st	Z, r24

    // Wait until conversion is finished
    while(ADCSRA & (1 << ADSC)) ;
 250:	80 81       	ld	r24, Z
 252:	86 fd       	sbrc	r24, 6
 254:	fd cf       	rjmp	.-6      	; 0x250 <adcRead+0x44>

    *value = 0;
 256:	11 96       	adiw	r26, 0x01	; 1
 258:	1c 92       	st	X, r1
 25a:	1e 92       	st	-X, r1
    // First read ADCL so ADCH is not updated during read
    *value = ADCL;
 25c:	80 91 78 00 	lds	r24, 0x0078
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	11 96       	adiw	r26, 0x01	; 1
 264:	9c 93       	st	X, r25
 266:	8e 93       	st	-X, r24
    // After reading ADCH, register can be updated again
    *value |= (ADCH << 8);
 268:	20 91 79 00 	lds	r18, 0x0079
 26c:	92 2b       	or	r25, r18
 26e:	8d 93       	st	X+, r24
 270:	9c 93       	st	X, r25
 272:	08 95       	ret

00000274 <main>:
const char menuLine1[] PROGMEM = "ADC Results";
const char menuLine2[] PROGMEM = "------------------";
const char menuLine3[] PROGMEM = "Temperature: ";
const char menuLine4[] PROGMEM = "Potentiometer: ";

int main(){
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	66 97       	sbiw	r28, 0x16	; 22
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61

    // Store the ADC value
    uint16_t adcVal = 0;
 288:	1a 82       	std	Y+2, r1	; 0x02
 28a:	19 82       	std	Y+1, r1	; 0x01
    char msgVal[20] = {0};
 28c:	fe 01       	movw	r30, r28
 28e:	33 96       	adiw	r30, 0x03	; 3
 290:	84 e1       	ldi	r24, 0x14	; 20
 292:	df 01       	movw	r26, r30
 294:	1d 92       	st	X+, r1
 296:	8a 95       	dec	r24
 298:	e9 f7       	brne	.-6      	; 0x294 <main+0x20>

    uart_init();
 29a:	0e 94 94 00 	call	0x128	; 0x128 <uart_init>
    adcInit();
 29e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <adcInit>
    sei();
 2a2:	78 94       	sei
    uart_send(0x0D);
    uart_send(0x0A);
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 2a4:	31 2c       	mov	r3, r1

    while((c = pgm_read_byte(string + index)) != 0){
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f6 e8       	ldi	r31, 0x86	; 134
 2aa:	8f 2e       	mov	r8, r31
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	9f 2e       	mov	r9, r31
 2b0:	f0 2d       	mov	r31, r0
 2b2:	0f 2e       	mov	r0, r31
 2b4:	f8 e7       	ldi	r31, 0x78	; 120
 2b6:	af 2e       	mov	r10, r31
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	bf 2e       	mov	r11, r31
 2bc:	f0 2d       	mov	r31, r0
        // Convert the temperature
        // 242 mV = -45 °C
        // 242mV + 45 + 1 LSB Offset Error
        adcVal -= 288;

        snprintf(msgVal, 20, "%d °C", (int16_t) adcVal);
 2be:	0f 2e       	mov	r0, r31
 2c0:	f1 e0       	ldi	r31, 0x01	; 1
 2c2:	cf 2e       	mov	r12, r31
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	df 2e       	mov	r13, r31
 2c8:	f0 2d       	mov	r31, r0
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f4 e1       	ldi	r31, 0x14	; 20
 2ce:	4f 2e       	mov	r4, r31
 2d0:	f0 2d       	mov	r31, r0
 2d2:	8e 01       	movw	r16, r28
 2d4:	0d 5f       	subi	r16, 0xFD	; 253
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
 2d8:	0f 2e       	mov	r0, r31
 2da:	f8 e6       	ldi	r31, 0x68	; 104
 2dc:	6f 2e       	mov	r6, r31
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	7f 2e       	mov	r7, r31
 2e2:	f0 2d       	mov	r31, r0

        // Convert ADC to mV
        // 5.000 / (2^10)
        adcVal *= 4.8828125;

        snprintf(msgVal, 20, "%d mV", adcVal);
 2e4:	0f 2e       	mov	r0, r31
 2e6:	f8 e0       	ldi	r31, 0x08	; 8
 2e8:	ef 2e       	mov	r14, r31
 2ea:	f1 e0       	ldi	r31, 0x01	; 1
 2ec:	ff 2e       	mov	r15, r31
 2ee:	f0 2d       	mov	r31, r0
    uart_send(0x0D);
    uart_send(0x0A);
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 2f0:	51 2c       	mov	r5, r1
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <main+0x86>

    while((c = pgm_read_byte(string + index)) != 0){
        uart_send(c);
 2f4:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
        index++;
 2f8:	33 94       	inc	r3
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 2fa:	e3 2d       	mov	r30, r3
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	e7 56       	subi	r30, 0x67	; 103
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	84 91       	lpm	r24, Z
 304:	81 11       	cpse	r24, r1
 306:	f6 cf       	rjmp	.-20     	; 0x2f4 <main+0x80>

#include "uart.h"
#include <avr/pgmspace.h>

inline void sendCRLF(){
    uart_send(0x0D);
 308:	8d e0       	ldi	r24, 0x0D	; 13
 30a:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
    uart_send(0x0A);
 30e:	8a e0       	ldi	r24, 0x0A	; 10
 310:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 314:	f4 01       	movw	r30, r8
 316:	84 91       	lpm	r24, Z
 318:	88 23       	and	r24, r24
 31a:	59 f0       	breq	.+22     	; 0x332 <main+0xbe>
    uart_send(0x0D);
    uart_send(0x0A);
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 31c:	35 2c       	mov	r3, r5

    while((c = pgm_read_byte(string + index)) != 0){
        uart_send(c);
 31e:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
        index++;
 322:	33 94       	inc	r3
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 324:	e3 2d       	mov	r30, r3
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ea 57       	subi	r30, 0x7A	; 122
 32a:	ff 4f       	sbci	r31, 0xFF	; 255
 32c:	84 91       	lpm	r24, Z
 32e:	81 11       	cpse	r24, r1
 330:	f6 cf       	rjmp	.-20     	; 0x31e <main+0xaa>

#include "uart.h"
#include <avr/pgmspace.h>

inline void sendCRLF(){
    uart_send(0x0D);
 332:	8d e0       	ldi	r24, 0x0D	; 13
 334:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
    uart_send(0x0A);
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 33e:	f5 01       	movw	r30, r10
 340:	84 91       	lpm	r24, Z
 342:	88 23       	and	r24, r24
 344:	59 f0       	breq	.+22     	; 0x35c <main+0xe8>
    uart_send(0x0D);
    uart_send(0x0A);
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 346:	35 2c       	mov	r3, r5

    while((c = pgm_read_byte(string + index)) != 0){
        uart_send(c);
 348:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
        index++;
 34c:	33 94       	inc	r3
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 34e:	e3 2d       	mov	r30, r3
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	e8 58       	subi	r30, 0x88	; 136
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	84 91       	lpm	r24, Z
 358:	81 11       	cpse	r24, r1
 35a:	f6 cf       	rjmp	.-20     	; 0x348 <main+0xd4>
        sendCRLF();
        sendPGMString(menuLine2);
        sendCRLF();

        sendPGMString(menuLine3);
        adcRead(TEMPERATURE, &adcVal);
 35c:	be 01       	movw	r22, r28
 35e:	6f 5f       	subi	r22, 0xFF	; 255
 360:	7f 4f       	sbci	r23, 0xFF	; 255
 362:	88 e0       	ldi	r24, 0x08	; 8
 364:	0e 94 06 01 	call	0x20c	; 0x20c <adcRead>
        
        // Convert the temperature
        // 242 mV = -45 °C
        // 242mV + 45 + 1 LSB Offset Error
        adcVal -= 288;
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	9a 81       	ldd	r25, Y+2	; 0x02
 36c:	80 52       	subi	r24, 0x20	; 32
 36e:	91 40       	sbci	r25, 0x01	; 1
 370:	9a 83       	std	Y+2, r25	; 0x02
 372:	89 83       	std	Y+1, r24	; 0x01

        snprintf(msgVal, 20, "%d °C", (int16_t) adcVal);
 374:	9f 93       	push	r25
 376:	8f 93       	push	r24
 378:	df 92       	push	r13
 37a:	cf 92       	push	r12
 37c:	1f 92       	push	r1
 37e:	4f 92       	push	r4
 380:	1f 93       	push	r17
 382:	0f 93       	push	r16
 384:	0e 94 4d 03 	call	0x69a	; 0x69a <snprintf>
}

inline void sendString(char * string){
    uint8_t index = 0;

    while(string[index] != 0){
 388:	8b 81       	ldd	r24, Y+3	; 0x03
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	88 23       	and	r24, r24
 396:	51 f0       	breq	.+20     	; 0x3ac <main+0x138>
        index++;
    }   
}

inline void sendString(char * string){
    uint8_t index = 0;
 398:	35 2c       	mov	r3, r5

    while(string[index] != 0){
        uart_send(string[index]);
 39a:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
        index++;
 39e:	33 94       	inc	r3
}

inline void sendString(char * string){
    uint8_t index = 0;

    while(string[index] != 0){
 3a0:	f8 01       	movw	r30, r16
 3a2:	e3 0d       	add	r30, r3
 3a4:	f1 1d       	adc	r31, r1
 3a6:	80 81       	ld	r24, Z
 3a8:	81 11       	cpse	r24, r1
 3aa:	f7 cf       	rjmp	.-18     	; 0x39a <main+0x126>

#include "uart.h"
#include <avr/pgmspace.h>

inline void sendCRLF(){
    uart_send(0x0D);
 3ac:	8d e0       	ldi	r24, 0x0D	; 13
 3ae:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
    uart_send(0x0A);
 3b2:	8a e0       	ldi	r24, 0x0A	; 10
 3b4:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 3b8:	f3 01       	movw	r30, r6
 3ba:	84 91       	lpm	r24, Z
 3bc:	88 23       	and	r24, r24
 3be:	59 f0       	breq	.+22     	; 0x3d6 <main+0x162>
    uart_send(0x0D);
    uart_send(0x0A);
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 3c0:	35 2c       	mov	r3, r5

    while((c = pgm_read_byte(string + index)) != 0){
        uart_send(c);
 3c2:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
        index++;
 3c6:	33 94       	inc	r3
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;

    while((c = pgm_read_byte(string + index)) != 0){
 3c8:	e3 2d       	mov	r30, r3
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	e8 59       	subi	r30, 0x98	; 152
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	84 91       	lpm	r24, Z
 3d2:	81 11       	cpse	r24, r1
 3d4:	f6 cf       	rjmp	.-20     	; 0x3c2 <main+0x14e>
        sendString(msgVal);
        sendCRLF();

        sendPGMString(menuLine4);
        adcRead(POTIPIN, &adcVal);
 3d6:	be 01       	movw	r22, r28
 3d8:	6f 5f       	subi	r22, 0xFF	; 255
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 06 01 	call	0x20c	; 0x20c <adcRead>

        // Convert ADC to mV
        // 5.000 / (2^10)
        adcVal *= 4.8828125;
 3e2:	69 81       	ldd	r22, Y+1	; 0x01
 3e4:	7a 81       	ldd	r23, Y+2	; 0x02
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__floatunsisf>
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e4       	ldi	r19, 0x40	; 64
 3f2:	4c e9       	ldi	r20, 0x9C	; 156
 3f4:	50 e4       	ldi	r21, 0x40	; 64
 3f6:	0e 94 c2 02 	call	0x584	; 0x584 <__mulsf3>
 3fa:	0e 94 30 02 	call	0x460	; 0x460 <__fixunssfsi>
 3fe:	69 83       	std	Y+1, r22	; 0x01
 400:	7a 83       	std	Y+2, r23	; 0x02

        snprintf(msgVal, 20, "%d mV", adcVal);
 402:	7f 93       	push	r23
 404:	6f 93       	push	r22
 406:	ff 92       	push	r15
 408:	ef 92       	push	r14
 40a:	1f 92       	push	r1
 40c:	4f 92       	push	r4
 40e:	1f 93       	push	r17
 410:	0f 93       	push	r16
 412:	0e 94 4d 03 	call	0x69a	; 0x69a <snprintf>
}

inline void sendString(char * string){
    uint8_t index = 0;

    while(string[index] != 0){
 416:	8b 81       	ldd	r24, Y+3	; 0x03
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	88 23       	and	r24, r24
 424:	51 f0       	breq	.+20     	; 0x43a <main+0x1c6>
        index++;
    }   
}

inline void sendString(char * string){
    uint8_t index = 0;
 426:	35 2c       	mov	r3, r5

    while(string[index] != 0){
        uart_send(string[index]);
 428:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
        index++;
 42c:	33 94       	inc	r3
}

inline void sendString(char * string){
    uint8_t index = 0;

    while(string[index] != 0){
 42e:	f8 01       	movw	r30, r16
 430:	e3 0d       	add	r30, r3
 432:	f1 1d       	adc	r31, r1
 434:	80 81       	ld	r24, Z
 436:	81 11       	cpse	r24, r1
 438:	f7 cf       	rjmp	.-18     	; 0x428 <main+0x1b4>

#include "uart.h"
#include <avr/pgmspace.h>

inline void sendCRLF(){
    uart_send(0x0D);
 43a:	8d e0       	ldi	r24, 0x0D	; 13
 43c:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
    uart_send(0x0A);
 440:	8a e0       	ldi	r24, 0x0A	; 10
 442:	0e 94 72 00 	call	0xe4	; 0xe4 <uart_send>
 446:	3f ef       	ldi	r19, 0xFF	; 255
 448:	83 ed       	ldi	r24, 0xD3	; 211
 44a:	90 e3       	ldi	r25, 0x30	; 48
 44c:	31 50       	subi	r19, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <main+0x1d8>
 454:	00 c0       	rjmp	.+0      	; 0x456 <main+0x1e2>
 456:	00 00       	nop
        sendString(msgVal);
        sendCRLF();

        _delay_ms(1000);
        clearScreen();
 458:	0e 94 7e 00 	call	0xfc	; 0xfc <clearScreen>
}

inline void sendPGMString(const char * string){
    uint8_t index = 0, c;
 45c:	35 2c       	mov	r3, r5
    }
 45e:	4d cf       	rjmp	.-358    	; 0x2fa <main+0x86>

00000460 <__fixunssfsi>:
 460:	70 d0       	rcall	.+224    	; 0x542 <__fp_splitA>
 462:	88 f0       	brcs	.+34     	; 0x486 <__fixunssfsi+0x26>
 464:	9f 57       	subi	r25, 0x7F	; 127
 466:	90 f0       	brcs	.+36     	; 0x48c <__fixunssfsi+0x2c>
 468:	b9 2f       	mov	r27, r25
 46a:	99 27       	eor	r25, r25
 46c:	b7 51       	subi	r27, 0x17	; 23
 46e:	a0 f0       	brcs	.+40     	; 0x498 <__fixunssfsi+0x38>
 470:	d1 f0       	breq	.+52     	; 0x4a6 <__fixunssfsi+0x46>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	88 1f       	adc	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	1a f0       	brmi	.+6      	; 0x482 <__fixunssfsi+0x22>
 47c:	ba 95       	dec	r27
 47e:	c9 f7       	brne	.-14     	; 0x472 <__fixunssfsi+0x12>
 480:	12 c0       	rjmp	.+36     	; 0x4a6 <__fixunssfsi+0x46>
 482:	b1 30       	cpi	r27, 0x01	; 1
 484:	81 f0       	breq	.+32     	; 0x4a6 <__fixunssfsi+0x46>
 486:	77 d0       	rcall	.+238    	; 0x576 <__fp_zero>
 488:	b1 e0       	ldi	r27, 0x01	; 1
 48a:	08 95       	ret
 48c:	74 c0       	rjmp	.+232    	; 0x576 <__fp_zero>
 48e:	67 2f       	mov	r22, r23
 490:	78 2f       	mov	r23, r24
 492:	88 27       	eor	r24, r24
 494:	b8 5f       	subi	r27, 0xF8	; 248
 496:	39 f0       	breq	.+14     	; 0x4a6 <__fixunssfsi+0x46>
 498:	b9 3f       	cpi	r27, 0xF9	; 249
 49a:	cc f3       	brlt	.-14     	; 0x48e <__fixunssfsi+0x2e>
 49c:	86 95       	lsr	r24
 49e:	77 95       	ror	r23
 4a0:	67 95       	ror	r22
 4a2:	b3 95       	inc	r27
 4a4:	d9 f7       	brne	.-10     	; 0x49c <__fixunssfsi+0x3c>
 4a6:	3e f4       	brtc	.+14     	; 0x4b6 <__fixunssfsi+0x56>
 4a8:	90 95       	com	r25
 4aa:	80 95       	com	r24
 4ac:	70 95       	com	r23
 4ae:	61 95       	neg	r22
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	08 95       	ret

000004b8 <__floatunsisf>:
 4b8:	e8 94       	clt
 4ba:	09 c0       	rjmp	.+18     	; 0x4ce <__floatsisf+0x12>

000004bc <__floatsisf>:
 4bc:	97 fb       	bst	r25, 7
 4be:	3e f4       	brtc	.+14     	; 0x4ce <__floatsisf+0x12>
 4c0:	90 95       	com	r25
 4c2:	80 95       	com	r24
 4c4:	70 95       	com	r23
 4c6:	61 95       	neg	r22
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	99 23       	and	r25, r25
 4d0:	a9 f0       	breq	.+42     	; 0x4fc <__floatsisf+0x40>
 4d2:	f9 2f       	mov	r31, r25
 4d4:	96 e9       	ldi	r25, 0x96	; 150
 4d6:	bb 27       	eor	r27, r27
 4d8:	93 95       	inc	r25
 4da:	f6 95       	lsr	r31
 4dc:	87 95       	ror	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b7 95       	ror	r27
 4e4:	f1 11       	cpse	r31, r1
 4e6:	f8 cf       	rjmp	.-16     	; 0x4d8 <__floatsisf+0x1c>
 4e8:	fa f4       	brpl	.+62     	; 0x528 <__floatsisf+0x6c>
 4ea:	bb 0f       	add	r27, r27
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__floatsisf+0x36>
 4ee:	60 ff       	sbrs	r22, 0
 4f0:	1b c0       	rjmp	.+54     	; 0x528 <__floatsisf+0x6c>
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <__floatsisf+0x6c>
 4fc:	88 23       	and	r24, r24
 4fe:	11 f0       	breq	.+4      	; 0x504 <__floatsisf+0x48>
 500:	96 e9       	ldi	r25, 0x96	; 150
 502:	11 c0       	rjmp	.+34     	; 0x526 <__floatsisf+0x6a>
 504:	77 23       	and	r23, r23
 506:	21 f0       	breq	.+8      	; 0x510 <__floatsisf+0x54>
 508:	9e e8       	ldi	r25, 0x8E	; 142
 50a:	87 2f       	mov	r24, r23
 50c:	76 2f       	mov	r23, r22
 50e:	05 c0       	rjmp	.+10     	; 0x51a <__floatsisf+0x5e>
 510:	66 23       	and	r22, r22
 512:	71 f0       	breq	.+28     	; 0x530 <__floatsisf+0x74>
 514:	96 e8       	ldi	r25, 0x86	; 134
 516:	86 2f       	mov	r24, r22
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	2a f0       	brmi	.+10     	; 0x528 <__floatsisf+0x6c>
 51e:	9a 95       	dec	r25
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	da f7       	brpl	.-10     	; 0x51e <__floatsisf+0x62>
 528:	88 0f       	add	r24, r24
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <__fp_split3>:
 532:	57 fd       	sbrc	r21, 7
 534:	90 58       	subi	r25, 0x80	; 128
 536:	44 0f       	add	r20, r20
 538:	55 1f       	adc	r21, r21
 53a:	59 f0       	breq	.+22     	; 0x552 <__fp_splitA+0x10>
 53c:	5f 3f       	cpi	r21, 0xFF	; 255
 53e:	71 f0       	breq	.+28     	; 0x55c <__fp_splitA+0x1a>
 540:	47 95       	ror	r20

00000542 <__fp_splitA>:
 542:	88 0f       	add	r24, r24
 544:	97 fb       	bst	r25, 7
 546:	99 1f       	adc	r25, r25
 548:	61 f0       	breq	.+24     	; 0x562 <__fp_splitA+0x20>
 54a:	9f 3f       	cpi	r25, 0xFF	; 255
 54c:	79 f0       	breq	.+30     	; 0x56c <__fp_splitA+0x2a>
 54e:	87 95       	ror	r24
 550:	08 95       	ret
 552:	12 16       	cp	r1, r18
 554:	13 06       	cpc	r1, r19
 556:	14 06       	cpc	r1, r20
 558:	55 1f       	adc	r21, r21
 55a:	f2 cf       	rjmp	.-28     	; 0x540 <__fp_split3+0xe>
 55c:	46 95       	lsr	r20
 55e:	f1 df       	rcall	.-30     	; 0x542 <__fp_splitA>
 560:	08 c0       	rjmp	.+16     	; 0x572 <__fp_splitA+0x30>
 562:	16 16       	cp	r1, r22
 564:	17 06       	cpc	r1, r23
 566:	18 06       	cpc	r1, r24
 568:	99 1f       	adc	r25, r25
 56a:	f1 cf       	rjmp	.-30     	; 0x54e <__fp_splitA+0xc>
 56c:	86 95       	lsr	r24
 56e:	71 05       	cpc	r23, r1
 570:	61 05       	cpc	r22, r1
 572:	08 94       	sec
 574:	08 95       	ret

00000576 <__fp_zero>:
 576:	e8 94       	clt

00000578 <__fp_szero>:
 578:	bb 27       	eor	r27, r27
 57a:	66 27       	eor	r22, r22
 57c:	77 27       	eor	r23, r23
 57e:	cb 01       	movw	r24, r22
 580:	97 f9       	bld	r25, 7
 582:	08 95       	ret

00000584 <__mulsf3>:
 584:	0b d0       	rcall	.+22     	; 0x59c <__mulsf3x>
 586:	78 c0       	rjmp	.+240    	; 0x678 <__fp_round>
 588:	69 d0       	rcall	.+210    	; 0x65c <__fp_pscA>
 58a:	28 f0       	brcs	.+10     	; 0x596 <__mulsf3+0x12>
 58c:	6e d0       	rcall	.+220    	; 0x66a <__fp_pscB>
 58e:	18 f0       	brcs	.+6      	; 0x596 <__mulsf3+0x12>
 590:	95 23       	and	r25, r21
 592:	09 f0       	breq	.+2      	; 0x596 <__mulsf3+0x12>
 594:	5a c0       	rjmp	.+180    	; 0x64a <__fp_inf>
 596:	5f c0       	rjmp	.+190    	; 0x656 <__fp_nan>
 598:	11 24       	eor	r1, r1
 59a:	ee cf       	rjmp	.-36     	; 0x578 <__fp_szero>

0000059c <__mulsf3x>:
 59c:	ca df       	rcall	.-108    	; 0x532 <__fp_split3>
 59e:	a0 f3       	brcs	.-24     	; 0x588 <__mulsf3+0x4>

000005a0 <__mulsf3_pse>:
 5a0:	95 9f       	mul	r25, r21
 5a2:	d1 f3       	breq	.-12     	; 0x598 <__mulsf3+0x14>
 5a4:	95 0f       	add	r25, r21
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	55 1f       	adc	r21, r21
 5aa:	62 9f       	mul	r22, r18
 5ac:	f0 01       	movw	r30, r0
 5ae:	72 9f       	mul	r23, r18
 5b0:	bb 27       	eor	r27, r27
 5b2:	f0 0d       	add	r31, r0
 5b4:	b1 1d       	adc	r27, r1
 5b6:	63 9f       	mul	r22, r19
 5b8:	aa 27       	eor	r26, r26
 5ba:	f0 0d       	add	r31, r0
 5bc:	b1 1d       	adc	r27, r1
 5be:	aa 1f       	adc	r26, r26
 5c0:	64 9f       	mul	r22, r20
 5c2:	66 27       	eor	r22, r22
 5c4:	b0 0d       	add	r27, r0
 5c6:	a1 1d       	adc	r26, r1
 5c8:	66 1f       	adc	r22, r22
 5ca:	82 9f       	mul	r24, r18
 5cc:	22 27       	eor	r18, r18
 5ce:	b0 0d       	add	r27, r0
 5d0:	a1 1d       	adc	r26, r1
 5d2:	62 1f       	adc	r22, r18
 5d4:	73 9f       	mul	r23, r19
 5d6:	b0 0d       	add	r27, r0
 5d8:	a1 1d       	adc	r26, r1
 5da:	62 1f       	adc	r22, r18
 5dc:	83 9f       	mul	r24, r19
 5de:	a0 0d       	add	r26, r0
 5e0:	61 1d       	adc	r22, r1
 5e2:	22 1f       	adc	r18, r18
 5e4:	74 9f       	mul	r23, r20
 5e6:	33 27       	eor	r19, r19
 5e8:	a0 0d       	add	r26, r0
 5ea:	61 1d       	adc	r22, r1
 5ec:	23 1f       	adc	r18, r19
 5ee:	84 9f       	mul	r24, r20
 5f0:	60 0d       	add	r22, r0
 5f2:	21 1d       	adc	r18, r1
 5f4:	82 2f       	mov	r24, r18
 5f6:	76 2f       	mov	r23, r22
 5f8:	6a 2f       	mov	r22, r26
 5fa:	11 24       	eor	r1, r1
 5fc:	9f 57       	subi	r25, 0x7F	; 127
 5fe:	50 40       	sbci	r21, 0x00	; 0
 600:	8a f0       	brmi	.+34     	; 0x624 <__mulsf3_pse+0x84>
 602:	e1 f0       	breq	.+56     	; 0x63c <__mulsf3_pse+0x9c>
 604:	88 23       	and	r24, r24
 606:	4a f0       	brmi	.+18     	; 0x61a <__mulsf3_pse+0x7a>
 608:	ee 0f       	add	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	bb 1f       	adc	r27, r27
 60e:	66 1f       	adc	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	91 50       	subi	r25, 0x01	; 1
 616:	50 40       	sbci	r21, 0x00	; 0
 618:	a9 f7       	brne	.-22     	; 0x604 <__mulsf3_pse+0x64>
 61a:	9e 3f       	cpi	r25, 0xFE	; 254
 61c:	51 05       	cpc	r21, r1
 61e:	70 f0       	brcs	.+28     	; 0x63c <__mulsf3_pse+0x9c>
 620:	14 c0       	rjmp	.+40     	; 0x64a <__fp_inf>
 622:	aa cf       	rjmp	.-172    	; 0x578 <__fp_szero>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	ec f3       	brlt	.-6      	; 0x622 <__mulsf3_pse+0x82>
 628:	98 3e       	cpi	r25, 0xE8	; 232
 62a:	dc f3       	brlt	.-10     	; 0x622 <__mulsf3_pse+0x82>
 62c:	86 95       	lsr	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f7 95       	ror	r31
 636:	e7 95       	ror	r30
 638:	9f 5f       	subi	r25, 0xFF	; 255
 63a:	c1 f7       	brne	.-16     	; 0x62c <__mulsf3_pse+0x8c>
 63c:	fe 2b       	or	r31, r30
 63e:	88 0f       	add	r24, r24
 640:	91 1d       	adc	r25, r1
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
 646:	97 f9       	bld	r25, 7
 648:	08 95       	ret

0000064a <__fp_inf>:
 64a:	97 f9       	bld	r25, 7
 64c:	9f 67       	ori	r25, 0x7F	; 127
 64e:	80 e8       	ldi	r24, 0x80	; 128
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	08 95       	ret

00000656 <__fp_nan>:
 656:	9f ef       	ldi	r25, 0xFF	; 255
 658:	80 ec       	ldi	r24, 0xC0	; 192
 65a:	08 95       	ret

0000065c <__fp_pscA>:
 65c:	00 24       	eor	r0, r0
 65e:	0a 94       	dec	r0
 660:	16 16       	cp	r1, r22
 662:	17 06       	cpc	r1, r23
 664:	18 06       	cpc	r1, r24
 666:	09 06       	cpc	r0, r25
 668:	08 95       	ret

0000066a <__fp_pscB>:
 66a:	00 24       	eor	r0, r0
 66c:	0a 94       	dec	r0
 66e:	12 16       	cp	r1, r18
 670:	13 06       	cpc	r1, r19
 672:	14 06       	cpc	r1, r20
 674:	05 06       	cpc	r0, r21
 676:	08 95       	ret

00000678 <__fp_round>:
 678:	09 2e       	mov	r0, r25
 67a:	03 94       	inc	r0
 67c:	00 0c       	add	r0, r0
 67e:	11 f4       	brne	.+4      	; 0x684 <__fp_round+0xc>
 680:	88 23       	and	r24, r24
 682:	52 f0       	brmi	.+20     	; 0x698 <__fp_round+0x20>
 684:	bb 0f       	add	r27, r27
 686:	40 f4       	brcc	.+16     	; 0x698 <__fp_round+0x20>
 688:	bf 2b       	or	r27, r31
 68a:	11 f4       	brne	.+4      	; 0x690 <__fp_round+0x18>
 68c:	60 ff       	sbrs	r22, 0
 68e:	04 c0       	rjmp	.+8      	; 0x698 <__fp_round+0x20>
 690:	6f 5f       	subi	r22, 0xFF	; 255
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	8f 4f       	sbci	r24, 0xFF	; 255
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <snprintf>:
 69a:	ae e0       	ldi	r26, 0x0E	; 14
 69c:	b0 e0       	ldi	r27, 0x00	; 0
 69e:	e3 e5       	ldi	r30, 0x53	; 83
 6a0:	f3 e0       	ldi	r31, 0x03	; 3
 6a2:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__prologue_saves__+0x1c>
 6a6:	0d 89       	ldd	r16, Y+21	; 0x15
 6a8:	1e 89       	ldd	r17, Y+22	; 0x16
 6aa:	8f 89       	ldd	r24, Y+23	; 0x17
 6ac:	98 8d       	ldd	r25, Y+24	; 0x18
 6ae:	26 e0       	ldi	r18, 0x06	; 6
 6b0:	2c 83       	std	Y+4, r18	; 0x04
 6b2:	1a 83       	std	Y+2, r17	; 0x02
 6b4:	09 83       	std	Y+1, r16	; 0x01
 6b6:	97 ff       	sbrs	r25, 7
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <snprintf+0x24>
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e8       	ldi	r25, 0x80	; 128
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	9e 83       	std	Y+6, r25	; 0x06
 6c2:	8d 83       	std	Y+5, r24	; 0x05
 6c4:	ae 01       	movw	r20, r28
 6c6:	45 5e       	subi	r20, 0xE5	; 229
 6c8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ca:	69 8d       	ldd	r22, Y+25	; 0x19
 6cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
 6ce:	ce 01       	movw	r24, r28
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vfprintf>
 6d6:	4d 81       	ldd	r20, Y+5	; 0x05
 6d8:	5e 81       	ldd	r21, Y+6	; 0x06
 6da:	57 fd       	sbrc	r21, 7
 6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <snprintf+0x58>
 6de:	2f 81       	ldd	r18, Y+7	; 0x07
 6e0:	38 85       	ldd	r19, Y+8	; 0x08
 6e2:	42 17       	cp	r20, r18
 6e4:	53 07       	cpc	r21, r19
 6e6:	0c f4       	brge	.+2      	; 0x6ea <snprintf+0x50>
 6e8:	9a 01       	movw	r18, r20
 6ea:	f8 01       	movw	r30, r16
 6ec:	e2 0f       	add	r30, r18
 6ee:	f3 1f       	adc	r31, r19
 6f0:	10 82       	st	Z, r1
 6f2:	2e 96       	adiw	r28, 0x0e	; 14
 6f4:	e4 e0       	ldi	r30, 0x04	; 4
 6f6:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__epilogue_restores__+0x1c>

000006fa <vfprintf>:
 6fa:	ac e0       	ldi	r26, 0x0C	; 12
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	e3 e8       	ldi	r30, 0x83	; 131
 700:	f3 e0       	ldi	r31, 0x03	; 3
 702:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__prologue_saves__>
 706:	7c 01       	movw	r14, r24
 708:	6b 01       	movw	r12, r22
 70a:	8a 01       	movw	r16, r20
 70c:	fc 01       	movw	r30, r24
 70e:	17 82       	std	Z+7, r1	; 0x07
 710:	16 82       	std	Z+6, r1	; 0x06
 712:	83 81       	ldd	r24, Z+3	; 0x03
 714:	81 ff       	sbrs	r24, 1
 716:	bd c1       	rjmp	.+890    	; 0xa92 <__stack+0x193>
 718:	ce 01       	movw	r24, r28
 71a:	01 96       	adiw	r24, 0x01	; 1
 71c:	4c 01       	movw	r8, r24
 71e:	f7 01       	movw	r30, r14
 720:	93 81       	ldd	r25, Z+3	; 0x03
 722:	f6 01       	movw	r30, r12
 724:	93 fd       	sbrc	r25, 3
 726:	85 91       	lpm	r24, Z+
 728:	93 ff       	sbrs	r25, 3
 72a:	81 91       	ld	r24, Z+
 72c:	6f 01       	movw	r12, r30
 72e:	88 23       	and	r24, r24
 730:	09 f4       	brne	.+2      	; 0x734 <vfprintf+0x3a>
 732:	ab c1       	rjmp	.+854    	; 0xa8a <__stack+0x18b>
 734:	85 32       	cpi	r24, 0x25	; 37
 736:	39 f4       	brne	.+14     	; 0x746 <vfprintf+0x4c>
 738:	93 fd       	sbrc	r25, 3
 73a:	85 91       	lpm	r24, Z+
 73c:	93 ff       	sbrs	r25, 3
 73e:	81 91       	ld	r24, Z+
 740:	6f 01       	movw	r12, r30
 742:	85 32       	cpi	r24, 0x25	; 37
 744:	29 f4       	brne	.+10     	; 0x750 <vfprintf+0x56>
 746:	b7 01       	movw	r22, r14
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 74e:	e7 cf       	rjmp	.-50     	; 0x71e <vfprintf+0x24>
 750:	51 2c       	mov	r5, r1
 752:	31 2c       	mov	r3, r1
 754:	20 e0       	ldi	r18, 0x00	; 0
 756:	20 32       	cpi	r18, 0x20	; 32
 758:	a0 f4       	brcc	.+40     	; 0x782 <vfprintf+0x88>
 75a:	8b 32       	cpi	r24, 0x2B	; 43
 75c:	69 f0       	breq	.+26     	; 0x778 <vfprintf+0x7e>
 75e:	30 f4       	brcc	.+12     	; 0x76c <vfprintf+0x72>
 760:	80 32       	cpi	r24, 0x20	; 32
 762:	59 f0       	breq	.+22     	; 0x77a <vfprintf+0x80>
 764:	83 32       	cpi	r24, 0x23	; 35
 766:	69 f4       	brne	.+26     	; 0x782 <vfprintf+0x88>
 768:	20 61       	ori	r18, 0x10	; 16
 76a:	2c c0       	rjmp	.+88     	; 0x7c4 <vfprintf+0xca>
 76c:	8d 32       	cpi	r24, 0x2D	; 45
 76e:	39 f0       	breq	.+14     	; 0x77e <vfprintf+0x84>
 770:	80 33       	cpi	r24, 0x30	; 48
 772:	39 f4       	brne	.+14     	; 0x782 <vfprintf+0x88>
 774:	21 60       	ori	r18, 0x01	; 1
 776:	26 c0       	rjmp	.+76     	; 0x7c4 <vfprintf+0xca>
 778:	22 60       	ori	r18, 0x02	; 2
 77a:	24 60       	ori	r18, 0x04	; 4
 77c:	23 c0       	rjmp	.+70     	; 0x7c4 <vfprintf+0xca>
 77e:	28 60       	ori	r18, 0x08	; 8
 780:	21 c0       	rjmp	.+66     	; 0x7c4 <vfprintf+0xca>
 782:	27 fd       	sbrc	r18, 7
 784:	27 c0       	rjmp	.+78     	; 0x7d4 <vfprintf+0xda>
 786:	30 ed       	ldi	r19, 0xD0	; 208
 788:	38 0f       	add	r19, r24
 78a:	3a 30       	cpi	r19, 0x0A	; 10
 78c:	78 f4       	brcc	.+30     	; 0x7ac <vfprintf+0xb2>
 78e:	26 ff       	sbrs	r18, 6
 790:	06 c0       	rjmp	.+12     	; 0x79e <vfprintf+0xa4>
 792:	fa e0       	ldi	r31, 0x0A	; 10
 794:	5f 9e       	mul	r5, r31
 796:	30 0d       	add	r19, r0
 798:	11 24       	eor	r1, r1
 79a:	53 2e       	mov	r5, r19
 79c:	13 c0       	rjmp	.+38     	; 0x7c4 <vfprintf+0xca>
 79e:	8a e0       	ldi	r24, 0x0A	; 10
 7a0:	38 9e       	mul	r3, r24
 7a2:	30 0d       	add	r19, r0
 7a4:	11 24       	eor	r1, r1
 7a6:	33 2e       	mov	r3, r19
 7a8:	20 62       	ori	r18, 0x20	; 32
 7aa:	0c c0       	rjmp	.+24     	; 0x7c4 <vfprintf+0xca>
 7ac:	8e 32       	cpi	r24, 0x2E	; 46
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <vfprintf+0xbe>
 7b0:	26 fd       	sbrc	r18, 6
 7b2:	6b c1       	rjmp	.+726    	; 0xa8a <__stack+0x18b>
 7b4:	20 64       	ori	r18, 0x40	; 64
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <vfprintf+0xca>
 7b8:	8c 36       	cpi	r24, 0x6C	; 108
 7ba:	11 f4       	brne	.+4      	; 0x7c0 <vfprintf+0xc6>
 7bc:	20 68       	ori	r18, 0x80	; 128
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <vfprintf+0xca>
 7c0:	88 36       	cpi	r24, 0x68	; 104
 7c2:	41 f4       	brne	.+16     	; 0x7d4 <vfprintf+0xda>
 7c4:	f6 01       	movw	r30, r12
 7c6:	93 fd       	sbrc	r25, 3
 7c8:	85 91       	lpm	r24, Z+
 7ca:	93 ff       	sbrs	r25, 3
 7cc:	81 91       	ld	r24, Z+
 7ce:	6f 01       	movw	r12, r30
 7d0:	81 11       	cpse	r24, r1
 7d2:	c1 cf       	rjmp	.-126    	; 0x756 <vfprintf+0x5c>
 7d4:	98 2f       	mov	r25, r24
 7d6:	9f 7d       	andi	r25, 0xDF	; 223
 7d8:	95 54       	subi	r25, 0x45	; 69
 7da:	93 30       	cpi	r25, 0x03	; 3
 7dc:	28 f4       	brcc	.+10     	; 0x7e8 <vfprintf+0xee>
 7de:	0c 5f       	subi	r16, 0xFC	; 252
 7e0:	1f 4f       	sbci	r17, 0xFF	; 255
 7e2:	ff e3       	ldi	r31, 0x3F	; 63
 7e4:	f9 83       	std	Y+1, r31	; 0x01
 7e6:	0d c0       	rjmp	.+26     	; 0x802 <vfprintf+0x108>
 7e8:	83 36       	cpi	r24, 0x63	; 99
 7ea:	31 f0       	breq	.+12     	; 0x7f8 <vfprintf+0xfe>
 7ec:	83 37       	cpi	r24, 0x73	; 115
 7ee:	71 f0       	breq	.+28     	; 0x80c <vfprintf+0x112>
 7f0:	83 35       	cpi	r24, 0x53	; 83
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <vfprintf+0xfc>
 7f4:	5b c0       	rjmp	.+182    	; 0x8ac <vfprintf+0x1b2>
 7f6:	22 c0       	rjmp	.+68     	; 0x83c <vfprintf+0x142>
 7f8:	f8 01       	movw	r30, r16
 7fa:	80 81       	ld	r24, Z
 7fc:	89 83       	std	Y+1, r24	; 0x01
 7fe:	0e 5f       	subi	r16, 0xFE	; 254
 800:	1f 4f       	sbci	r17, 0xFF	; 255
 802:	44 24       	eor	r4, r4
 804:	43 94       	inc	r4
 806:	51 2c       	mov	r5, r1
 808:	54 01       	movw	r10, r8
 80a:	15 c0       	rjmp	.+42     	; 0x836 <vfprintf+0x13c>
 80c:	38 01       	movw	r6, r16
 80e:	f2 e0       	ldi	r31, 0x02	; 2
 810:	6f 0e       	add	r6, r31
 812:	71 1c       	adc	r7, r1
 814:	f8 01       	movw	r30, r16
 816:	a0 80       	ld	r10, Z
 818:	b1 80       	ldd	r11, Z+1	; 0x01
 81a:	26 ff       	sbrs	r18, 6
 81c:	03 c0       	rjmp	.+6      	; 0x824 <vfprintf+0x12a>
 81e:	65 2d       	mov	r22, r5
 820:	70 e0       	ldi	r23, 0x00	; 0
 822:	02 c0       	rjmp	.+4      	; 0x828 <vfprintf+0x12e>
 824:	6f ef       	ldi	r22, 0xFF	; 255
 826:	7f ef       	ldi	r23, 0xFF	; 255
 828:	c5 01       	movw	r24, r10
 82a:	2c 87       	std	Y+12, r18	; 0x0c
 82c:	0e 94 5a 05 	call	0xab4	; 0xab4 <strnlen>
 830:	2c 01       	movw	r4, r24
 832:	83 01       	movw	r16, r6
 834:	2c 85       	ldd	r18, Y+12	; 0x0c
 836:	2f 77       	andi	r18, 0x7F	; 127
 838:	22 2e       	mov	r2, r18
 83a:	17 c0       	rjmp	.+46     	; 0x86a <vfprintf+0x170>
 83c:	38 01       	movw	r6, r16
 83e:	f2 e0       	ldi	r31, 0x02	; 2
 840:	6f 0e       	add	r6, r31
 842:	71 1c       	adc	r7, r1
 844:	f8 01       	movw	r30, r16
 846:	a0 80       	ld	r10, Z
 848:	b1 80       	ldd	r11, Z+1	; 0x01
 84a:	26 ff       	sbrs	r18, 6
 84c:	03 c0       	rjmp	.+6      	; 0x854 <vfprintf+0x15a>
 84e:	65 2d       	mov	r22, r5
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x15e>
 854:	6f ef       	ldi	r22, 0xFF	; 255
 856:	7f ef       	ldi	r23, 0xFF	; 255
 858:	c5 01       	movw	r24, r10
 85a:	2c 87       	std	Y+12, r18	; 0x0c
 85c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <strnlen_P>
 860:	2c 01       	movw	r4, r24
 862:	2c 85       	ldd	r18, Y+12	; 0x0c
 864:	20 68       	ori	r18, 0x80	; 128
 866:	22 2e       	mov	r2, r18
 868:	83 01       	movw	r16, r6
 86a:	23 fc       	sbrc	r2, 3
 86c:	1b c0       	rjmp	.+54     	; 0x8a4 <vfprintf+0x1aa>
 86e:	83 2d       	mov	r24, r3
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	48 16       	cp	r4, r24
 874:	59 06       	cpc	r5, r25
 876:	b0 f4       	brcc	.+44     	; 0x8a4 <vfprintf+0x1aa>
 878:	b7 01       	movw	r22, r14
 87a:	80 e2       	ldi	r24, 0x20	; 32
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 882:	3a 94       	dec	r3
 884:	f4 cf       	rjmp	.-24     	; 0x86e <vfprintf+0x174>
 886:	f5 01       	movw	r30, r10
 888:	27 fc       	sbrc	r2, 7
 88a:	85 91       	lpm	r24, Z+
 88c:	27 fe       	sbrs	r2, 7
 88e:	81 91       	ld	r24, Z+
 890:	5f 01       	movw	r10, r30
 892:	b7 01       	movw	r22, r14
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 89a:	31 10       	cpse	r3, r1
 89c:	3a 94       	dec	r3
 89e:	f1 e0       	ldi	r31, 0x01	; 1
 8a0:	4f 1a       	sub	r4, r31
 8a2:	51 08       	sbc	r5, r1
 8a4:	41 14       	cp	r4, r1
 8a6:	51 04       	cpc	r5, r1
 8a8:	71 f7       	brne	.-36     	; 0x886 <vfprintf+0x18c>
 8aa:	e5 c0       	rjmp	.+458    	; 0xa76 <__stack+0x177>
 8ac:	84 36       	cpi	r24, 0x64	; 100
 8ae:	11 f0       	breq	.+4      	; 0x8b4 <vfprintf+0x1ba>
 8b0:	89 36       	cpi	r24, 0x69	; 105
 8b2:	39 f5       	brne	.+78     	; 0x902 <__stack+0x3>
 8b4:	f8 01       	movw	r30, r16
 8b6:	27 ff       	sbrs	r18, 7
 8b8:	07 c0       	rjmp	.+14     	; 0x8c8 <vfprintf+0x1ce>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	82 81       	ldd	r24, Z+2	; 0x02
 8c0:	93 81       	ldd	r25, Z+3	; 0x03
 8c2:	0c 5f       	subi	r16, 0xFC	; 252
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	08 c0       	rjmp	.+16     	; 0x8d8 <vfprintf+0x1de>
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	88 27       	eor	r24, r24
 8ce:	77 fd       	sbrc	r23, 7
 8d0:	80 95       	com	r24
 8d2:	98 2f       	mov	r25, r24
 8d4:	0e 5f       	subi	r16, 0xFE	; 254
 8d6:	1f 4f       	sbci	r17, 0xFF	; 255
 8d8:	2f 76       	andi	r18, 0x6F	; 111
 8da:	b2 2e       	mov	r11, r18
 8dc:	97 ff       	sbrs	r25, 7
 8de:	09 c0       	rjmp	.+18     	; 0x8f2 <vfprintf+0x1f8>
 8e0:	90 95       	com	r25
 8e2:	80 95       	com	r24
 8e4:	70 95       	com	r23
 8e6:	61 95       	neg	r22
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	20 68       	ori	r18, 0x80	; 128
 8f0:	b2 2e       	mov	r11, r18
 8f2:	2a e0       	ldi	r18, 0x0A	; 10
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	a4 01       	movw	r20, r8
 8f8:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ultoa_invert>
 8fc:	a8 2e       	mov	r10, r24
 8fe:	a8 18       	sub	r10, r8
 900:	44 c0       	rjmp	.+136    	; 0x98a <__stack+0x8b>
 902:	85 37       	cpi	r24, 0x75	; 117
 904:	29 f4       	brne	.+10     	; 0x910 <__stack+0x11>
 906:	2f 7e       	andi	r18, 0xEF	; 239
 908:	b2 2e       	mov	r11, r18
 90a:	2a e0       	ldi	r18, 0x0A	; 10
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	25 c0       	rjmp	.+74     	; 0x95a <__stack+0x5b>
 910:	f2 2f       	mov	r31, r18
 912:	f9 7f       	andi	r31, 0xF9	; 249
 914:	bf 2e       	mov	r11, r31
 916:	8f 36       	cpi	r24, 0x6F	; 111
 918:	c1 f0       	breq	.+48     	; 0x94a <__stack+0x4b>
 91a:	18 f4       	brcc	.+6      	; 0x922 <__stack+0x23>
 91c:	88 35       	cpi	r24, 0x58	; 88
 91e:	79 f0       	breq	.+30     	; 0x93e <__stack+0x3f>
 920:	b4 c0       	rjmp	.+360    	; 0xa8a <__stack+0x18b>
 922:	80 37       	cpi	r24, 0x70	; 112
 924:	19 f0       	breq	.+6      	; 0x92c <__stack+0x2d>
 926:	88 37       	cpi	r24, 0x78	; 120
 928:	21 f0       	breq	.+8      	; 0x932 <__stack+0x33>
 92a:	af c0       	rjmp	.+350    	; 0xa8a <__stack+0x18b>
 92c:	2f 2f       	mov	r18, r31
 92e:	20 61       	ori	r18, 0x10	; 16
 930:	b2 2e       	mov	r11, r18
 932:	b4 fe       	sbrs	r11, 4
 934:	0d c0       	rjmp	.+26     	; 0x950 <__stack+0x51>
 936:	8b 2d       	mov	r24, r11
 938:	84 60       	ori	r24, 0x04	; 4
 93a:	b8 2e       	mov	r11, r24
 93c:	09 c0       	rjmp	.+18     	; 0x950 <__stack+0x51>
 93e:	24 ff       	sbrs	r18, 4
 940:	0a c0       	rjmp	.+20     	; 0x956 <__stack+0x57>
 942:	9f 2f       	mov	r25, r31
 944:	96 60       	ori	r25, 0x06	; 6
 946:	b9 2e       	mov	r11, r25
 948:	06 c0       	rjmp	.+12     	; 0x956 <__stack+0x57>
 94a:	28 e0       	ldi	r18, 0x08	; 8
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	05 c0       	rjmp	.+10     	; 0x95a <__stack+0x5b>
 950:	20 e1       	ldi	r18, 0x10	; 16
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0x5b>
 956:	20 e1       	ldi	r18, 0x10	; 16
 958:	32 e0       	ldi	r19, 0x02	; 2
 95a:	f8 01       	movw	r30, r16
 95c:	b7 fe       	sbrs	r11, 7
 95e:	07 c0       	rjmp	.+14     	; 0x96e <__stack+0x6f>
 960:	60 81       	ld	r22, Z
 962:	71 81       	ldd	r23, Z+1	; 0x01
 964:	82 81       	ldd	r24, Z+2	; 0x02
 966:	93 81       	ldd	r25, Z+3	; 0x03
 968:	0c 5f       	subi	r16, 0xFC	; 252
 96a:	1f 4f       	sbci	r17, 0xFF	; 255
 96c:	06 c0       	rjmp	.+12     	; 0x97a <__stack+0x7b>
 96e:	60 81       	ld	r22, Z
 970:	71 81       	ldd	r23, Z+1	; 0x01
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	0e 5f       	subi	r16, 0xFE	; 254
 978:	1f 4f       	sbci	r17, 0xFF	; 255
 97a:	a4 01       	movw	r20, r8
 97c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__ultoa_invert>
 980:	a8 2e       	mov	r10, r24
 982:	a8 18       	sub	r10, r8
 984:	fb 2d       	mov	r31, r11
 986:	ff 77       	andi	r31, 0x7F	; 127
 988:	bf 2e       	mov	r11, r31
 98a:	b6 fe       	sbrs	r11, 6
 98c:	0b c0       	rjmp	.+22     	; 0x9a4 <__stack+0xa5>
 98e:	2b 2d       	mov	r18, r11
 990:	2e 7f       	andi	r18, 0xFE	; 254
 992:	a5 14       	cp	r10, r5
 994:	50 f4       	brcc	.+20     	; 0x9aa <__stack+0xab>
 996:	b4 fe       	sbrs	r11, 4
 998:	0a c0       	rjmp	.+20     	; 0x9ae <__stack+0xaf>
 99a:	b2 fc       	sbrc	r11, 2
 99c:	08 c0       	rjmp	.+16     	; 0x9ae <__stack+0xaf>
 99e:	2b 2d       	mov	r18, r11
 9a0:	2e 7e       	andi	r18, 0xEE	; 238
 9a2:	05 c0       	rjmp	.+10     	; 0x9ae <__stack+0xaf>
 9a4:	7a 2c       	mov	r7, r10
 9a6:	2b 2d       	mov	r18, r11
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <__stack+0xb1>
 9aa:	7a 2c       	mov	r7, r10
 9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <__stack+0xb1>
 9ae:	75 2c       	mov	r7, r5
 9b0:	24 ff       	sbrs	r18, 4
 9b2:	0d c0       	rjmp	.+26     	; 0x9ce <__stack+0xcf>
 9b4:	fe 01       	movw	r30, r28
 9b6:	ea 0d       	add	r30, r10
 9b8:	f1 1d       	adc	r31, r1
 9ba:	80 81       	ld	r24, Z
 9bc:	80 33       	cpi	r24, 0x30	; 48
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__stack+0xc5>
 9c0:	29 7e       	andi	r18, 0xE9	; 233
 9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <__stack+0xd7>
 9c4:	22 ff       	sbrs	r18, 2
 9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <__stack+0xd5>
 9c8:	73 94       	inc	r7
 9ca:	73 94       	inc	r7
 9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <__stack+0xd7>
 9ce:	82 2f       	mov	r24, r18
 9d0:	86 78       	andi	r24, 0x86	; 134
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__stack+0xd7>
 9d4:	73 94       	inc	r7
 9d6:	23 fd       	sbrc	r18, 3
 9d8:	13 c0       	rjmp	.+38     	; 0xa00 <__stack+0x101>
 9da:	20 ff       	sbrs	r18, 0
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <__stack+0xeb>
 9de:	5a 2c       	mov	r5, r10
 9e0:	73 14       	cp	r7, r3
 9e2:	18 f4       	brcc	.+6      	; 0x9ea <__stack+0xeb>
 9e4:	53 0c       	add	r5, r3
 9e6:	57 18       	sub	r5, r7
 9e8:	73 2c       	mov	r7, r3
 9ea:	73 14       	cp	r7, r3
 9ec:	68 f4       	brcc	.+26     	; 0xa08 <__stack+0x109>
 9ee:	b7 01       	movw	r22, r14
 9f0:	80 e2       	ldi	r24, 0x20	; 32
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	2c 87       	std	Y+12, r18	; 0x0c
 9f6:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 9fa:	73 94       	inc	r7
 9fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 9fe:	f5 cf       	rjmp	.-22     	; 0x9ea <__stack+0xeb>
 a00:	73 14       	cp	r7, r3
 a02:	10 f4       	brcc	.+4      	; 0xa08 <__stack+0x109>
 a04:	37 18       	sub	r3, r7
 a06:	01 c0       	rjmp	.+2      	; 0xa0a <__stack+0x10b>
 a08:	31 2c       	mov	r3, r1
 a0a:	24 ff       	sbrs	r18, 4
 a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x133>
 a0e:	b7 01       	movw	r22, r14
 a10:	80 e3       	ldi	r24, 0x30	; 48
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	2c 87       	std	Y+12, r18	; 0x0c
 a16:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a1a:	2c 85       	ldd	r18, Y+12	; 0x0c
 a1c:	22 ff       	sbrs	r18, 2
 a1e:	17 c0       	rjmp	.+46     	; 0xa4e <__stack+0x14f>
 a20:	21 ff       	sbrs	r18, 1
 a22:	03 c0       	rjmp	.+6      	; 0xa2a <__stack+0x12b>
 a24:	88 e5       	ldi	r24, 0x58	; 88
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <__stack+0x12f>
 a2a:	88 e7       	ldi	r24, 0x78	; 120
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	b7 01       	movw	r22, r14
 a30:	0c c0       	rjmp	.+24     	; 0xa4a <__stack+0x14b>
 a32:	82 2f       	mov	r24, r18
 a34:	86 78       	andi	r24, 0x86	; 134
 a36:	59 f0       	breq	.+22     	; 0xa4e <__stack+0x14f>
 a38:	21 fd       	sbrc	r18, 1
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <__stack+0x141>
 a3c:	80 e2       	ldi	r24, 0x20	; 32
 a3e:	01 c0       	rjmp	.+2      	; 0xa42 <__stack+0x143>
 a40:	8b e2       	ldi	r24, 0x2B	; 43
 a42:	27 fd       	sbrc	r18, 7
 a44:	8d e2       	ldi	r24, 0x2D	; 45
 a46:	b7 01       	movw	r22, r14
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a4e:	a5 14       	cp	r10, r5
 a50:	38 f4       	brcc	.+14     	; 0xa60 <__stack+0x161>
 a52:	b7 01       	movw	r22, r14
 a54:	80 e3       	ldi	r24, 0x30	; 48
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a5c:	5a 94       	dec	r5
 a5e:	f7 cf       	rjmp	.-18     	; 0xa4e <__stack+0x14f>
 a60:	aa 94       	dec	r10
 a62:	f4 01       	movw	r30, r8
 a64:	ea 0d       	add	r30, r10
 a66:	f1 1d       	adc	r31, r1
 a68:	80 81       	ld	r24, Z
 a6a:	b7 01       	movw	r22, r14
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a72:	a1 10       	cpse	r10, r1
 a74:	f5 cf       	rjmp	.-22     	; 0xa60 <__stack+0x161>
 a76:	33 20       	and	r3, r3
 a78:	09 f4       	brne	.+2      	; 0xa7c <__stack+0x17d>
 a7a:	51 ce       	rjmp	.-862    	; 0x71e <vfprintf+0x24>
 a7c:	b7 01       	movw	r22, r14
 a7e:	80 e2       	ldi	r24, 0x20	; 32
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a86:	3a 94       	dec	r3
 a88:	f6 cf       	rjmp	.-20     	; 0xa76 <__stack+0x177>
 a8a:	f7 01       	movw	r30, r14
 a8c:	86 81       	ldd	r24, Z+6	; 0x06
 a8e:	97 81       	ldd	r25, Z+7	; 0x07
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <__stack+0x197>
 a92:	8f ef       	ldi	r24, 0xFF	; 255
 a94:	9f ef       	ldi	r25, 0xFF	; 255
 a96:	2c 96       	adiw	r28, 0x0c	; 12
 a98:	e2 e1       	ldi	r30, 0x12	; 18
 a9a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__epilogue_restores__>

00000a9e <strnlen_P>:
 a9e:	fc 01       	movw	r30, r24
 aa0:	05 90       	lpm	r0, Z+
 aa2:	61 50       	subi	r22, 0x01	; 1
 aa4:	70 40       	sbci	r23, 0x00	; 0
 aa6:	01 10       	cpse	r0, r1
 aa8:	d8 f7       	brcc	.-10     	; 0xaa0 <strnlen_P+0x2>
 aaa:	80 95       	com	r24
 aac:	90 95       	com	r25
 aae:	8e 0f       	add	r24, r30
 ab0:	9f 1f       	adc	r25, r31
 ab2:	08 95       	ret

00000ab4 <strnlen>:
 ab4:	fc 01       	movw	r30, r24
 ab6:	61 50       	subi	r22, 0x01	; 1
 ab8:	70 40       	sbci	r23, 0x00	; 0
 aba:	01 90       	ld	r0, Z+
 abc:	01 10       	cpse	r0, r1
 abe:	d8 f7       	brcc	.-10     	; 0xab6 <strnlen+0x2>
 ac0:	80 95       	com	r24
 ac2:	90 95       	com	r25
 ac4:	8e 0f       	add	r24, r30
 ac6:	9f 1f       	adc	r25, r31
 ac8:	08 95       	ret

00000aca <fputc>:
 aca:	0f 93       	push	r16
 acc:	1f 93       	push	r17
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	18 2f       	mov	r17, r24
 ad4:	09 2f       	mov	r16, r25
 ad6:	eb 01       	movw	r28, r22
 ad8:	8b 81       	ldd	r24, Y+3	; 0x03
 ada:	81 fd       	sbrc	r24, 1
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <fputc+0x1a>
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	9f ef       	ldi	r25, 0xFF	; 255
 ae2:	20 c0       	rjmp	.+64     	; 0xb24 <fputc+0x5a>
 ae4:	82 ff       	sbrs	r24, 2
 ae6:	10 c0       	rjmp	.+32     	; 0xb08 <fputc+0x3e>
 ae8:	4e 81       	ldd	r20, Y+6	; 0x06
 aea:	5f 81       	ldd	r21, Y+7	; 0x07
 aec:	2c 81       	ldd	r18, Y+4	; 0x04
 aee:	3d 81       	ldd	r19, Y+5	; 0x05
 af0:	42 17       	cp	r20, r18
 af2:	53 07       	cpc	r21, r19
 af4:	7c f4       	brge	.+30     	; 0xb14 <fputc+0x4a>
 af6:	e8 81       	ld	r30, Y
 af8:	f9 81       	ldd	r31, Y+1	; 0x01
 afa:	9f 01       	movw	r18, r30
 afc:	2f 5f       	subi	r18, 0xFF	; 255
 afe:	3f 4f       	sbci	r19, 0xFF	; 255
 b00:	39 83       	std	Y+1, r19	; 0x01
 b02:	28 83       	st	Y, r18
 b04:	10 83       	st	Z, r17
 b06:	06 c0       	rjmp	.+12     	; 0xb14 <fputc+0x4a>
 b08:	e8 85       	ldd	r30, Y+8	; 0x08
 b0a:	f9 85       	ldd	r31, Y+9	; 0x09
 b0c:	81 2f       	mov	r24, r17
 b0e:	09 95       	icall
 b10:	89 2b       	or	r24, r25
 b12:	29 f7       	brne	.-54     	; 0xade <fputc+0x14>
 b14:	2e 81       	ldd	r18, Y+6	; 0x06
 b16:	3f 81       	ldd	r19, Y+7	; 0x07
 b18:	2f 5f       	subi	r18, 0xFF	; 255
 b1a:	3f 4f       	sbci	r19, 0xFF	; 255
 b1c:	3f 83       	std	Y+7, r19	; 0x07
 b1e:	2e 83       	std	Y+6, r18	; 0x06
 b20:	81 2f       	mov	r24, r17
 b22:	90 2f       	mov	r25, r16
 b24:	df 91       	pop	r29
 b26:	cf 91       	pop	r28
 b28:	1f 91       	pop	r17
 b2a:	0f 91       	pop	r16
 b2c:	08 95       	ret

00000b2e <__ultoa_invert>:
 b2e:	fa 01       	movw	r30, r20
 b30:	aa 27       	eor	r26, r26
 b32:	28 30       	cpi	r18, 0x08	; 8
 b34:	51 f1       	breq	.+84     	; 0xb8a <__ultoa_invert+0x5c>
 b36:	20 31       	cpi	r18, 0x10	; 16
 b38:	81 f1       	breq	.+96     	; 0xb9a <__ultoa_invert+0x6c>
 b3a:	e8 94       	clt
 b3c:	6f 93       	push	r22
 b3e:	6e 7f       	andi	r22, 0xFE	; 254
 b40:	6e 5f       	subi	r22, 0xFE	; 254
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	af 4f       	sbci	r26, 0xFF	; 255
 b4a:	b1 e0       	ldi	r27, 0x01	; 1
 b4c:	3e d0       	rcall	.+124    	; 0xbca <__ultoa_invert+0x9c>
 b4e:	b4 e0       	ldi	r27, 0x04	; 4
 b50:	3c d0       	rcall	.+120    	; 0xbca <__ultoa_invert+0x9c>
 b52:	67 0f       	add	r22, r23
 b54:	78 1f       	adc	r23, r24
 b56:	89 1f       	adc	r24, r25
 b58:	9a 1f       	adc	r25, r26
 b5a:	a1 1d       	adc	r26, r1
 b5c:	68 0f       	add	r22, r24
 b5e:	79 1f       	adc	r23, r25
 b60:	8a 1f       	adc	r24, r26
 b62:	91 1d       	adc	r25, r1
 b64:	a1 1d       	adc	r26, r1
 b66:	6a 0f       	add	r22, r26
 b68:	71 1d       	adc	r23, r1
 b6a:	81 1d       	adc	r24, r1
 b6c:	91 1d       	adc	r25, r1
 b6e:	a1 1d       	adc	r26, r1
 b70:	20 d0       	rcall	.+64     	; 0xbb2 <__ultoa_invert+0x84>
 b72:	09 f4       	brne	.+2      	; 0xb76 <__ultoa_invert+0x48>
 b74:	68 94       	set
 b76:	3f 91       	pop	r19
 b78:	2a e0       	ldi	r18, 0x0A	; 10
 b7a:	26 9f       	mul	r18, r22
 b7c:	11 24       	eor	r1, r1
 b7e:	30 19       	sub	r19, r0
 b80:	30 5d       	subi	r19, 0xD0	; 208
 b82:	31 93       	st	Z+, r19
 b84:	de f6       	brtc	.-74     	; 0xb3c <__ultoa_invert+0xe>
 b86:	cf 01       	movw	r24, r30
 b88:	08 95       	ret
 b8a:	46 2f       	mov	r20, r22
 b8c:	47 70       	andi	r20, 0x07	; 7
 b8e:	40 5d       	subi	r20, 0xD0	; 208
 b90:	41 93       	st	Z+, r20
 b92:	b3 e0       	ldi	r27, 0x03	; 3
 b94:	0f d0       	rcall	.+30     	; 0xbb4 <__ultoa_invert+0x86>
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__ultoa_invert+0x5c>
 b98:	f6 cf       	rjmp	.-20     	; 0xb86 <__ultoa_invert+0x58>
 b9a:	46 2f       	mov	r20, r22
 b9c:	4f 70       	andi	r20, 0x0F	; 15
 b9e:	40 5d       	subi	r20, 0xD0	; 208
 ba0:	4a 33       	cpi	r20, 0x3A	; 58
 ba2:	18 f0       	brcs	.+6      	; 0xbaa <__ultoa_invert+0x7c>
 ba4:	49 5d       	subi	r20, 0xD9	; 217
 ba6:	31 fd       	sbrc	r19, 1
 ba8:	40 52       	subi	r20, 0x20	; 32
 baa:	41 93       	st	Z+, r20
 bac:	02 d0       	rcall	.+4      	; 0xbb2 <__ultoa_invert+0x84>
 bae:	a9 f7       	brne	.-22     	; 0xb9a <__ultoa_invert+0x6c>
 bb0:	ea cf       	rjmp	.-44     	; 0xb86 <__ultoa_invert+0x58>
 bb2:	b4 e0       	ldi	r27, 0x04	; 4
 bb4:	a6 95       	lsr	r26
 bb6:	97 95       	ror	r25
 bb8:	87 95       	ror	r24
 bba:	77 95       	ror	r23
 bbc:	67 95       	ror	r22
 bbe:	ba 95       	dec	r27
 bc0:	c9 f7       	brne	.-14     	; 0xbb4 <__ultoa_invert+0x86>
 bc2:	00 97       	sbiw	r24, 0x00	; 0
 bc4:	61 05       	cpc	r22, r1
 bc6:	71 05       	cpc	r23, r1
 bc8:	08 95       	ret
 bca:	9b 01       	movw	r18, r22
 bcc:	ac 01       	movw	r20, r24
 bce:	0a 2e       	mov	r0, r26
 bd0:	06 94       	lsr	r0
 bd2:	57 95       	ror	r21
 bd4:	47 95       	ror	r20
 bd6:	37 95       	ror	r19
 bd8:	27 95       	ror	r18
 bda:	ba 95       	dec	r27
 bdc:	c9 f7       	brne	.-14     	; 0xbd0 <__ultoa_invert+0xa2>
 bde:	62 0f       	add	r22, r18
 be0:	73 1f       	adc	r23, r19
 be2:	84 1f       	adc	r24, r20
 be4:	95 1f       	adc	r25, r21
 be6:	a0 1d       	adc	r26, r0
 be8:	08 95       	ret

00000bea <__prologue_saves__>:
 bea:	2f 92       	push	r2
 bec:	3f 92       	push	r3
 bee:	4f 92       	push	r4
 bf0:	5f 92       	push	r5
 bf2:	6f 92       	push	r6
 bf4:	7f 92       	push	r7
 bf6:	8f 92       	push	r8
 bf8:	9f 92       	push	r9
 bfa:	af 92       	push	r10
 bfc:	bf 92       	push	r11
 bfe:	cf 92       	push	r12
 c00:	df 92       	push	r13
 c02:	ef 92       	push	r14
 c04:	ff 92       	push	r15
 c06:	0f 93       	push	r16
 c08:	1f 93       	push	r17
 c0a:	cf 93       	push	r28
 c0c:	df 93       	push	r29
 c0e:	cd b7       	in	r28, 0x3d	; 61
 c10:	de b7       	in	r29, 0x3e	; 62
 c12:	ca 1b       	sub	r28, r26
 c14:	db 0b       	sbc	r29, r27
 c16:	0f b6       	in	r0, 0x3f	; 63
 c18:	f8 94       	cli
 c1a:	de bf       	out	0x3e, r29	; 62
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	cd bf       	out	0x3d, r28	; 61
 c20:	09 94       	ijmp

00000c22 <__epilogue_restores__>:
 c22:	2a 88       	ldd	r2, Y+18	; 0x12
 c24:	39 88       	ldd	r3, Y+17	; 0x11
 c26:	48 88       	ldd	r4, Y+16	; 0x10
 c28:	5f 84       	ldd	r5, Y+15	; 0x0f
 c2a:	6e 84       	ldd	r6, Y+14	; 0x0e
 c2c:	7d 84       	ldd	r7, Y+13	; 0x0d
 c2e:	8c 84       	ldd	r8, Y+12	; 0x0c
 c30:	9b 84       	ldd	r9, Y+11	; 0x0b
 c32:	aa 84       	ldd	r10, Y+10	; 0x0a
 c34:	b9 84       	ldd	r11, Y+9	; 0x09
 c36:	c8 84       	ldd	r12, Y+8	; 0x08
 c38:	df 80       	ldd	r13, Y+7	; 0x07
 c3a:	ee 80       	ldd	r14, Y+6	; 0x06
 c3c:	fd 80       	ldd	r15, Y+5	; 0x05
 c3e:	0c 81       	ldd	r16, Y+4	; 0x04
 c40:	1b 81       	ldd	r17, Y+3	; 0x03
 c42:	aa 81       	ldd	r26, Y+2	; 0x02
 c44:	b9 81       	ldd	r27, Y+1	; 0x01
 c46:	ce 0f       	add	r28, r30
 c48:	d1 1d       	adc	r29, r1
 c4a:	0f b6       	in	r0, 0x3f	; 63
 c4c:	f8 94       	cli
 c4e:	de bf       	out	0x3e, r29	; 62
 c50:	0f be       	out	0x3f, r0	; 63
 c52:	cd bf       	out	0x3d, r28	; 61
 c54:	ed 01       	movw	r28, r26
 c56:	08 95       	ret

00000c58 <_exit>:
 c58:	f8 94       	cli

00000c5a <__stop_program>:
 c5a:	ff cf       	rjmp	.-2      	; 0xc5a <__stop_program>
