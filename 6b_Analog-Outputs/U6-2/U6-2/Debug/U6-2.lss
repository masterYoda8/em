
U6-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800102  00800102  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000514  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000265  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026a  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ad  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  9e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_send>:
}

void uart_send(uint8_t data) {
	
	// If send register empty and no XOFF
	while(!(UCSR0A & (1<<UDRE0)) && !sendBlock) {
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 fd       	sbrc	r25, 5
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <uart_send+0x12>
  b0:	90 91 02 01 	lds	r25, 0x0102
  b4:	99 23       	and	r25, r25
  b6:	c9 f3       	breq	.-14     	; 0xaa <uart_send+0x4>
		;
	}
	UDR0 = data;
  b8:	80 93 c6 00 	sts	0x00C6, r24
  bc:	08 95       	ret

000000be <send_xoff>:
	}

	return returnVal;
}

void send_xoff(){
  be:	cf 93       	push	r28
	uint8_t sreg = SREG;
  c0:	cf b7       	in	r28, 0x3f	; 63
	cli();
  c2:	f8 94       	cli
	x_status = XOFF;
  c4:	83 e1       	ldi	r24, 0x13	; 19
  c6:	80 93 00 01 	sts	0x0100, r24
	uart_send(XOFF);
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_send>
	SREG = sreg;
  ce:	cf bf       	out	0x3f, r28	; 63
	
}
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <__vector_18>:
volatile uint8_t lastRead = 0;
volatile uint8_t counter = 0;
volatile uint8_t sendBlock = 0;
volatile uint8_t x_status = XON; 

ISR(USART_RX_vect){
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	uint8_t tmp = UDR0;
  f6:	80 91 c6 00 	lds	r24, 0x00C6
	
	// If XOFF is received block sending
	if (tmp == XOFF) {
  fa:	83 31       	cpi	r24, 0x13	; 19
  fc:	21 f4       	brne	.+8      	; 0x106 <__vector_18+0x32>
		sendBlock = 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 02 01 	sts	0x0102, r24
 104:	22 c0       	rjmp	.+68     	; 0x14a <__vector_18+0x76>
	} 
	// if XON is received allow sending
	else if(tmp == XON) {
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	19 f4       	brne	.+6      	; 0x110 <__vector_18+0x3c>
		sendBlock = 0;
 10a:	10 92 02 01 	sts	0x0102, r1
 10e:	1d c0       	rjmp	.+58     	; 0x14a <__vector_18+0x76>
	}
	else {
		receiveBuffer[lastReceived] = tmp;
 110:	e0 91 04 01 	lds	r30, 0x0104
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	eb 5f       	subi	r30, 0xFB	; 251
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	80 83       	st	Z, r24
		lastReceived = ((lastReceived + 1) % 32);
 11c:	80 91 04 01 	lds	r24, 0x0104
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	8f 71       	andi	r24, 0x1F	; 31
 126:	90 78       	andi	r25, 0x80	; 128
 128:	80 93 04 01 	sts	0x0104, r24
		counter++;
 12c:	80 91 03 01 	lds	r24, 0x0103
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	80 93 03 01 	sts	0x0103, r24
		// If ring buffer has 26 elements stop receiving
		if(counter >= 22 && x_status==XON) {
 136:	80 91 03 01 	lds	r24, 0x0103
 13a:	86 31       	cpi	r24, 0x16	; 22
 13c:	30 f0       	brcs	.+12     	; 0x14a <__vector_18+0x76>
 13e:	80 91 00 01 	lds	r24, 0x0100
 142:	81 31       	cpi	r24, 0x11	; 17
 144:	11 f4       	brne	.+4      	; 0x14a <__vector_18+0x76>
			send_xoff();
 146:	0e 94 5f 00 	call	0xbe	; 0xbe <send_xoff>
		}
	}
	 
	
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <adcInit>:
} ADC_PORT;

void adcInit(){
    // Enable ADC, first disable power reduction for ADC
    // PRR &= ~(1<<PRADC); <- default already zero
    ADCSRA |= (1 << ADEN);
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 68       	ori	r24, 0x80	; 128
 174:	80 83       	st	Z, r24

    // Set prescaler frequency to 125 kHz - (16 MHz / 125 kHz = 128)
    ADCSRA |= ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
 176:	80 81       	ld	r24, Z
 178:	87 60       	ori	r24, 0x07	; 7
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <adcRead>:
    }
    // Wait for voltage to stabilize
    _delay_ms(5);
}

void adcRead(ADC_PORT port, uint16_t* value){
 17e:	db 01       	movw	r26, r22
    ADCSRA |= ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));
}

inline void adcSetPort(ADC_PORT port){
    // clear regs
    ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	90 7f       	andi	r25, 0xF0	; 240
 188:	90 83       	st	Z, r25

    // enum is uint8_t first 4 bits are always empty
    ADMUX |= port;
 18a:	90 81       	ld	r25, Z
 18c:	98 2b       	or	r25, r24
 18e:	90 83       	st	Z, r25
}

inline void adcSetRefVoltage(ADC_PORT port){
    if(port == TEMPERATURE){
 190:	88 30       	cpi	r24, 0x08	; 8
 192:	21 f4       	brne	.+8      	; 0x19c <adcRead+0x1e>
        // 1.1V Reference Voltage
        ADMUX |= ((1 << REFS1) | (1 << REFS0));
 194:	80 81       	ld	r24, Z
 196:	80 6c       	ori	r24, 0xC0	; 192
 198:	80 83       	st	Z, r24
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <adcRead+0x2e>
    } else {
        // AVCC Pin with external capacitor at AREF pin
        ADMUX &= ~(1 << REFS1);
 19c:	ec e7       	ldi	r30, 0x7C	; 124
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	8f 77       	andi	r24, 0x7F	; 127
 1a4:	80 83       	st	Z, r24
        ADMUX |= (1 << REFS0);
 1a6:	80 81       	ld	r24, Z
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	8f e1       	ldi	r24, 0x1F	; 31
 1ae:	9e e4       	ldi	r25, 0x4E	; 78
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <adcRead+0x32>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <adcRead+0x38>
 1b6:	00 00       	nop
void adcRead(ADC_PORT port, uint16_t* value){
    adcSetPort(port);
    adcSetRefVoltage(port);

    // Start conversion
    ADCSRA |= (1 << ADSC);
 1b8:	ea e7       	ldi	r30, 0x7A	; 122
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 64       	ori	r24, 0x40	; 64
 1c0:	80 83       	st	Z, r24

    // Wait until conversion is finished
    while(ADCSRA & (1 << ADSC)) ;
 1c2:	80 81       	ld	r24, Z
 1c4:	86 fd       	sbrc	r24, 6
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <adcRead+0x44>

    *value = 0;
 1c8:	11 96       	adiw	r26, 0x01	; 1
 1ca:	1c 92       	st	X, r1
 1cc:	1e 92       	st	-X, r1
    // First read ADCL so ADCH is not updated during read
    *value = ADCL;
 1ce:	80 91 78 00 	lds	r24, 0x0078
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	11 96       	adiw	r26, 0x01	; 1
 1d6:	9c 93       	st	X, r25
 1d8:	8e 93       	st	-X, r24
    // After reading ADCH, register can be updated again
    *value |= (ADCH << 8);
 1da:	20 91 79 00 	lds	r18, 0x0079
 1de:	92 2b       	or	r25, r18
 1e0:	8d 93       	st	X+, r24
 1e2:	9c 93       	st	X, r25
 1e4:	08 95       	ret

000001e6 <main>:
#include "adc.h"

#define POTIPIN A2


int main(){
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <main+0x6>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62

    // Store the ADC value
    uint16_t adcVal = 0;
 1f0:	1a 82       	std	Y+2, r1	; 0x02
 1f2:	19 82       	std	Y+1, r1	; 0x01

    adcInit();
 1f4:	0e 94 b6 00 	call	0x16c	; 0x16c <adcInit>

    // Init PWM Timer
    TCNT0 = 0;
 1f8:	16 bc       	out	0x26, r1	; 38
    
	// Set OCR0A | Inverted mode because LED is wired to 5V
	OCR0A = 250;
 1fa:	8a ef       	ldi	r24, 0xFA	; 250
 1fc:	87 bd       	out	0x27, r24	; 39
	OCR0B = 125;
 1fe:	8d e7       	ldi	r24, 0x7D	; 125
 200:	88 bd       	out	0x28, r24	; 40
	TCCR0A |= ((1 << COM0B1) | (1 << COM0B0));
 202:	84 b5       	in	r24, 0x24	; 36
 204:	80 63       	ori	r24, 0x30	; 48
 206:	84 bd       	out	0x24, r24	; 36
	    
	DDRD |= (1 << PD5);
 208:	55 9a       	sbi	0x0a, 5	; 10
	
    // Fast PWM (WGM2:0 = 111) 1 kHz | 64 Prescaler (CS2:0 = 011)
    TCCR0A |= ((1 << WGM01) | (1 << WGM00));
 20a:	84 b5       	in	r24, 0x24	; 36
 20c:	83 60       	ori	r24, 0x03	; 3
 20e:	84 bd       	out	0x24, r24	; 36
    TCCR0B |= ((1 << WGM02) | (1 << CS01) | (1 << CS00));
 210:	85 b5       	in	r24, 0x25	; 37
 212:	8b 60       	ori	r24, 0x0B	; 11
 214:	85 bd       	out	0x25, r24	; 37

    sei();
 216:	78 94       	sei
    while (1){
        adcRead(POTIPIN, &adcVal);
 218:	be 01       	movw	r22, r28
 21a:	6f 5f       	subi	r22, 0xFF	; 255
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 bf 00 	call	0x17e	; 0x17e <adcRead>

        // Convert ADC to mV
        // 250 / (2^10) = 1/4
        adcVal /= 4;
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	9a 81       	ldd	r25, Y+2	; 0x02
 228:	96 95       	lsr	r25
 22a:	87 95       	ror	r24
 22c:	96 95       	lsr	r25
 22e:	87 95       	ror	r24
 230:	9a 83       	std	Y+2, r25	; 0x02
 232:	89 83       	std	Y+1, r24	; 0x01
        OCR0B = (uint8_t) adcVal;
 234:	88 bd       	out	0x28, r24	; 40
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9c e9       	ldi	r25, 0x9C	; 156
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0x54>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x5a>
 240:	00 00       	nop
 242:	ea cf       	rjmp	.-44     	; 0x218 <main+0x32>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
