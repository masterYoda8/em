
U4-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080010c  0080010c  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000336  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000388  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000222  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fd  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000207  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023a  00000000  00000000  00000e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 33       	cpi	r26, 0x30	; 48
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
} bool;


void uart_init() {
	// Configure baud rate
	UBRR0H = (BAUD_CONST >> 8);
  a6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_CONST;
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable uart send and receive and uart receive complete interrupt
	UCSR0B |= ((1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0));
  b0:	e1 ec       	ldi	r30, 0xC1	; 193
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 69       	ori	r24, 0x98	; 152
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <uart_send>:
}

void uart_send(uint8_t data) {
	
	// If send register empty and no XOFF
	while(!(UCSR0A & (1<<UDRE0)) && !sendBlock) {
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 fd       	sbrc	r25, 5
  c4:	04 c0       	rjmp	.+8      	; 0xce <uart_send+0x12>
  c6:	90 91 0c 01 	lds	r25, 0x010C
  ca:	99 23       	and	r25, r25
  cc:	c9 f3       	breq	.-14     	; 0xc0 <uart_send+0x4>
		;
	}
	UDR0 = data;
  ce:	80 93 c6 00 	sts	0x00C6, r24
  d2:	08 95       	ret

000000d4 <send_xoff>:
	}
	SREG = sreg;
	return returnVal;
}

void send_xoff(){
  d4:	cf 93       	push	r28
	uint8_t sreg = SREG;
  d6:	cf b7       	in	r28, 0x3f	; 63
	cli();
  d8:	f8 94       	cli
	x_status = XOFF;
  da:	83 e1       	ldi	r24, 0x13	; 19
  dc:	80 93 00 01 	sts	0x0100, r24
	uart_send(XOFF);
  e0:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_send>
	SREG = sreg;
  e4:	cf bf       	out	0x3f, r28	; 63
	
}
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <__vector_18>:
volatile uint8_t lastRead = 0;
volatile uint8_t counter = 0;
volatile uint8_t sendBlock = 0;
volatile uint8_t x_status = XON; 

ISR(USART_RX_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	4f 93       	push	r20
  fa:	5f 93       	push	r21
  fc:	6f 93       	push	r22
  fe:	7f 93       	push	r23
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	uint8_t tmp = UDR0;
 10c:	80 91 c6 00 	lds	r24, 0x00C6
	
	// If XOFF is received block sending
	if (tmp == XOFF) {
 110:	83 31       	cpi	r24, 0x13	; 19
 112:	21 f4       	brne	.+8      	; 0x11c <__vector_18+0x32>
		sendBlock = 1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 0c 01 	sts	0x010C, r24
 11a:	22 c0       	rjmp	.+68     	; 0x160 <__vector_18+0x76>
	} 
	// if XON is received allow sending
	else if(tmp == XON) {
 11c:	81 31       	cpi	r24, 0x11	; 17
 11e:	19 f4       	brne	.+6      	; 0x126 <__vector_18+0x3c>
		sendBlock = 0;
 120:	10 92 0c 01 	sts	0x010C, r1
 124:	1d c0       	rjmp	.+58     	; 0x160 <__vector_18+0x76>
	}
	else {
		receiveBuffer[lastReceived] = tmp;
 126:	e0 91 0f 01 	lds	r30, 0x010F
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e0 5f       	subi	r30, 0xF0	; 240
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	80 83       	st	Z, r24
		lastReceived = ((lastReceived + 1) % 32);
 132:	80 91 0f 01 	lds	r24, 0x010F
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	8f 71       	andi	r24, 0x1F	; 31
 13c:	90 78       	andi	r25, 0x80	; 128
 13e:	80 93 0f 01 	sts	0x010F, r24
		counter++;
 142:	80 91 0d 01 	lds	r24, 0x010D
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 0d 01 	sts	0x010D, r24
		// If ring buffer has 26 elements stop receiving
		if(counter >= 22 && x_status==XON) {
 14c:	80 91 0d 01 	lds	r24, 0x010D
 150:	86 31       	cpi	r24, 0x16	; 22
 152:	30 f0       	brcs	.+12     	; 0x160 <__vector_18+0x76>
 154:	80 91 00 01 	lds	r24, 0x0100
 158:	81 31       	cpi	r24, 0x11	; 17
 15a:	11 f4       	brne	.+4      	; 0x160 <__vector_18+0x76>
			send_xoff();
 15c:	0e 94 6a 00 	call	0xd4	; 0xd4 <send_xoff>
		}
	}
	 
	
}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <send_xon>:
	x_status = XOFF;
	uart_send(XOFF);
	SREG = sreg;
	
}
void send_xon(){
 182:	cf 93       	push	r28
	uint8_t sreg = SREG;
 184:	cf b7       	in	r28, 0x3f	; 63
	cli();
 186:	f8 94       	cli
	x_status = XON;
 188:	81 e1       	ldi	r24, 0x11	; 17
 18a:	80 93 00 01 	sts	0x0100, r24
	uart_send(XON);
 18e:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_send>
	SREG = sreg;
 192:	cf bf       	out	0x3f, r28	; 63
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <uart_receive>:
		;
	}
	UDR0 = data;
}

uint8_t uart_receive(){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
	// Enable uart send and receive and uart receive complete interrupt
	UCSR0B |= ((1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0));
}

bool bufferEmpty() {
	return (!counter);
 19c:	90 91 0d 01 	lds	r25, 0x010D
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	91 11       	cpse	r25, r1
 1a4:	80 e0       	ldi	r24, 0x00	; 0
	}
	UDR0 = data;
}

uint8_t uart_receive(){
	if(bufferEmpty()) {
 1a6:	81 11       	cpse	r24, r1
 1a8:	23 c0       	rjmp	.+70     	; 0x1f0 <uart_receive+0x58>
		return '\0';
	}
	
	uint8_t returnVal = receiveBuffer[lastRead];
 1aa:	e0 91 0e 01 	lds	r30, 0x010E
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e0 5f       	subi	r30, 0xF0	; 240
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	c0 81       	ld	r28, Z
	
	uint8_t sreg = SREG;
 1b6:	df b7       	in	r29, 0x3f	; 63
	cli();
 1b8:	f8 94       	cli
	counter--;
 1ba:	80 91 0d 01 	lds	r24, 0x010D
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	80 93 0d 01 	sts	0x010D, r24
	
	lastRead = (lastRead + 1) % 32;
 1c4:	20 91 0e 01 	lds	r18, 0x010E
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	2f 5f       	subi	r18, 0xFF	; 255
 1cc:	3f 4f       	sbci	r19, 0xFF	; 255
 1ce:	2f 71       	andi	r18, 0x1F	; 31
 1d0:	30 78       	andi	r19, 0x80	; 128
 1d2:	20 93 0e 01 	sts	0x010E, r18
	
	// If ring buffer elements are less than or equal to 10 allow sending
	if (counter <= 10 && x_status == XOFF) {
 1d6:	80 91 0d 01 	lds	r24, 0x010D
 1da:	8b 30       	cpi	r24, 0x0B	; 11
 1dc:	30 f4       	brcc	.+12     	; 0x1ea <uart_receive+0x52>
 1de:	80 91 00 01 	lds	r24, 0x0100
 1e2:	83 31       	cpi	r24, 0x13	; 19
 1e4:	11 f4       	brne	.+4      	; 0x1ea <uart_receive+0x52>
		send_xon();
 1e6:	0e 94 c1 00 	call	0x182	; 0x182 <send_xon>
	}
	SREG = sreg;
 1ea:	df bf       	out	0x3f, r29	; 63
	return returnVal;
 1ec:	8c 2f       	mov	r24, r28
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <uart_receive+0x5a>
	UDR0 = data;
}

uint8_t uart_receive(){
	if(bufferEmpty()) {
		return '\0';
 1f0:	80 e0       	ldi	r24, 0x00	; 0
	if (counter <= 10 && x_status == XOFF) {
		send_xon();
	}
	SREG = sreg;
	return returnVal;
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <main>:
//_delay_ms(100);
// PORTD |= (1 << DEBUG_LED_VAL);
// DEBUG END

int main(void)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	2b 97       	sbiw	r28, 0x0b	; 11
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
	// Debug LED
	DDRD |= (1 << DEBUG_LED_MODE);
 20c:	50 9a       	sbi	0x0a, 0	; 10
	PORTD |= (1 << DEBUG_LED_VAL);
 20e:	58 9a       	sbi	0x0b, 0	; 11
	
	sei();
 210:	78 94       	sei
	PORTD &= ~(1 << DEBUG_LED_VAL);
	_delay_ms(1000);
	PORTD |= (1 << DEBUG_LED_VAL);
	*/
	uint8_t t;
	const char meldung[]="Hier Text:";
 212:	8b e0       	ldi	r24, 0x0B	; 11
 214:	e1 e0       	ldi	r30, 0x01	; 1
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	de 01       	movw	r26, r28
 21a:	11 96       	adiw	r26, 0x01	; 1
 21c:	01 90       	ld	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	8a 95       	dec	r24
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x24>
	uart_init();
 224:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
	for(int f=0;meldung[f]!='\0';f++)
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	88 23       	and	r24, r24
 22c:	51 f0       	breq	.+20     	; 0x242 <main+0x4a>
 22e:	8e 01       	movw	r16, r28
 230:	0e 5f       	subi	r16, 0xFE	; 254
 232:	1f 4f       	sbci	r17, 0xFF	; 255
	uart_send(meldung[f]);
 234:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_send>
	PORTD |= (1 << DEBUG_LED_VAL);
	*/
	uint8_t t;
	const char meldung[]="Hier Text:";
	uart_init();
	for(int f=0;meldung[f]!='\0';f++)
 238:	f8 01       	movw	r30, r16
 23a:	81 91       	ld	r24, Z+
 23c:	8f 01       	movw	r16, r30
 23e:	81 11       	cpse	r24, r1
 240:	f9 cf       	rjmp	.-14     	; 0x234 <main+0x3c>
	uart_send(meldung[f]);
	while (1)
	{
		t = uart_receive();
 242:	0e 94 cc 00 	call	0x198	; 0x198 <uart_receive>
		if (t == '\0') {
 246:	88 23       	and	r24, r24
 248:	e1 f3       	breq	.-8      	; 0x242 <main+0x4a>
			continue;
		}
		uart_send(t);
 24a:	0e 94 5e 00 	call	0xbc	; 0xbc <uart_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	ff ef       	ldi	r31, 0xFF	; 255
 250:	21 ee       	ldi	r18, 0xE1	; 225
 252:	84 e0       	ldi	r24, 0x04	; 4
 254:	f1 50       	subi	r31, 0x01	; 1
 256:	20 40       	sbci	r18, 0x00	; 0
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x5c>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x66>
 25e:	00 00       	nop
 260:	f0 cf       	rjmp	.-32     	; 0x242 <main+0x4a>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
